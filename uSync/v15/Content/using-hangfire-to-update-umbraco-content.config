<?xml version="1.0" encoding="utf-8"?>
<Content Key="9fe5312a-4d4f-4812-9a24-b4bca9945b91" Alias="Using Hangfire to update Umbraco content" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/UsingHangfireToUpdateUmbracoContent</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2022-03-26T16:42:25</CreateDate>
    <NodeName Default="Using Hangfire to update Umbraco content" />
    <SortOrder>52</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>If you've been reading this blog for a while, you must have realized that I am a huge <a rel="noopener" href="https://www.hangfire.io/" target="_blank">Hangfire</a> fan. It's an excellent tool to help in scheduling background tasks. The best part is that it includes a super useful dashboard allowing you to see exactly what is going on with your scheduled jobs and run them at will.</p>
<p><strong>Note: this only applies to Umbraco 9 and up.</strong></p>
<p>With the help of my <a rel="noopener" href="https://github.com/p-m-j" target="_blank">colleague Paul Johnson</a>, I recently updated my <a rel="noopener" href="https://www.nuget.org/packages/Cultiv.Hangfire/1.0.1#readme" target="_blank" data-anchor="#readme">Hangfire for Umbraco package</a>, which now runs great on Umbraco Cloud, and can be used with LocalDb as well.</p>
<p>The funny thing is, I have never used Hangfire for anything related to Umbraco. Usually I use it to talk to remote APIs, create a local cache and read that into a template. </p>
<p>So after getting asked this from my <a rel="noopener" href="https://twitter.com/ameyn" target="_blank">colleague Tony</a>, who found <a rel="noopener" href="https://apidocs.umbraco.com/v9/csharp/api/Umbraco.Cms.Core.IPublishedContentQueryAccessor.html" target="_blank">an interesting bit of example code</a>, I thought I'd try it out.</p>
<p>As it turns out, that did the trick and I have a full example for you:</p>
<pre>using System;
using System.Linq;
using Hangfire;
using Hangfire.Console;
using Hangfire.Server;
using Microsoft.Extensions.DependencyInjection;
using Umbraco.Cms.Core;
using Umbraco.Cms.Core.Composing;
using Umbraco.Cms.Core.DependencyInjection;
using Umbraco.Cms.Core.Web;

namespace Collaborators.Web.JobScheduler
{
    public class Scheduler : IComposer
    {
        public void Compose(IUmbracoBuilder builder)
        {
            builder.Services.AddScoped&lt;IJobs, Jobs&gt;();
            RecurringJob.AddOrUpdate&lt;IJobs&gt;(x  =&gt; x.ManipulateContent(null), Cron.Hourly);
        }
    }

    public interface IJobs
    {
        void ManipulateContent(PerformContext context);
    }

    public class Jobs : IJobs
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly IUmbracoContextFactory _umbracoContextFactory;

        public Jobs(IServiceProvider serviceProvider, 
            IUmbracoContextFactory umbracoContextFactory)
        {
            _serviceProvider = serviceProvider;
            _umbracoContextFactory = umbracoContextFactory;
        }

        public void ManipulateContent(PerformContext context)
        {
            using var _ = _umbracoContextFactory.EnsureUmbracoContext();
            using var serviceScope = _serviceProvider.CreateScope();
            
            var query = serviceScope.ServiceProvider.GetRequiredService&lt;IPublishedContentQuery&gt;();
            var rootNode = query.ContentAtRoot().FirstOrDefault();
            
            if (rootNode == null) return; 
            
            context.WriteLine($"Root node - Id: {rootNode.Id} | Name: {rootNode.Name}");
        }
    }
} 
</pre>
<p>To explain: in a Composer we tell Umbraco that the Jobs is to be used when we ask for an IJobs type. In the Jobs class we inject IServiceProvider and IUmbracoContextFactory to use later. These will create a proper UmbracoContext and then we can create a Scope to start doing content queries.</p>
<p>Of course just querying is super fun, but you might also want to actually update content. It's not difficult to inject an IContentService now and get rolling. But we've been getting sporadic reports of the content cache and Examine indexes not always updating accordingly when doing this from a background task.</p>
<p>To help with this problem, community member <a rel="noopener" href="https://twitter.com/nzdev3" target="_blank">Chad (also known as nzdev)</a> recently posted some code on our Discord server that makes sure that the DatabaseServerMessenger sends the message that content has been updated. </p>
<p>So here's some updated code that doesn't just access the content cache but also saves and publishes our home page:</p>
<pre>using System;
using System.Linq;
using Hangfire;
using Hangfire.Console;
using Hangfire.Server;
using Microsoft.Extensions.DependencyInjection;
using Umbraco.Cms.Core;
using Umbraco.Cms.Core.Composing;
using Umbraco.Cms.Core.DependencyInjection;
using Umbraco.Cms.Core.Services;
using Umbraco.Cms.Core.Sync;
using Umbraco.Cms.Core.Web;
using Umbraco.Cms.Infrastructure.Sync;

namespace Collaborators.Web.JobScheduler
{
    public class Scheduler : IComposer
    {
        public void Compose(IUmbracoBuilder builder)
        {
            builder.Services.AddScoped&lt;IJobs, Jobs&gt;();
            RecurringJob.AddOrUpdate&lt;IJobs&gt;(x  =&gt; x.ManipulateContent(null), Cron.Hourly);
        }
    }

    public interface IJobs
    {
        void ManipulateContent(PerformContext context);
    }

    public class Jobs : IJobs
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly IUmbracoContextFactory _umbracoContextFactory;
        private readonly IServerMessenger _serverMessenger;
        private readonly IContentService _contentService;

        public Jobs(IServiceProvider serviceProvider, 
            IUmbracoContextFactory umbracoContextFactory, 
            IServerMessenger serverMessenger, 
            IContentService contentService)
        {
            _serviceProvider = serviceProvider;
            _umbracoContextFactory = umbracoContextFactory;
            _serverMessenger = serverMessenger;
            _contentService = contentService;
        }

        public void ManipulateContent(PerformContext context)
        {
            using var backgroundScope = new BackgroundScope(_serverMessenger);        
            using var _ = _umbracoContextFactory.EnsureUmbracoContext();
            using var serviceScope = _serviceProvider.CreateScope();
            
            var query = serviceScope.ServiceProvider.GetRequiredService&lt;IPublishedContentQuery&gt;();
            var rootNode = query.ContentAtRoot().FirstOrDefault();
            
            if (rootNode == null) return; 
            
            context.WriteLine($"Root node - Id: {rootNode.Id} | Name: {rootNode.Name}");
            
            // Do something with ContentService
            var content = _contentService.GetById(rootNode.Id);
            content.Name = "Home " + DateTime.Now.ToUniversalTime();
            _contentService.SaveAndPublish(content);
            
            context.WriteLine($"Root node updated - Id: {content.Id} | Name: {content.Name}");
        }
    }
    
    public class BackgroundScope : IDisposable
    {
        private readonly IServerMessenger _serverMessenger;

        public BackgroundScope(IServerMessenger serverMessenger)
        {
            _serverMessenger = serverMessenger;
        }

        public void Dispose()
        {
            if (_serverMessenger is BatchedDatabaseServerMessenger batchedDatabaseServerMessenger)
            {
                batchedDatabaseServerMessenger.SendMessages();
            }
        }
    }
}</pre>
<p>Just to make it more clear, we're now also injecting IServerMessenger and IContentService, the former to make sure we can create the BackgroundScope and the latter to be able to update the content.</p>
<p>And there we have it:</p>
<p><img src="?rmode=max&amp;width=500" alt="" width="500" height="115.54921540656206" data-udi="umb://media/b4240e9b64a749cb884f862b4cbfb4a3"></p>
<p>Hangfire logging shows us the nodename before update, after update and we've made sure caches get updated through the addition of the BackgroundScope. </p>
<p>Hopefully this serves as some inspiration for your own background tasks and now I have a URL to point to for people trying to work with Umbraco content from Hangfire!</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/2c045f91ef08429281e03af41bb48b2c]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[1]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[0]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>