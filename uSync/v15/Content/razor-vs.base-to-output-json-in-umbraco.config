<?xml version="1.0" encoding="utf-8"?>
<Content Key="114ff52c-1698-49a8-9ec2-b28ec2f0d112" Alias="Razor vs. &quot;/base&quot; to output Json in Umbraco" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/RazorVsBaseToOutputJsonInUmbraco</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2011-07-25T09:52:57</CreateDate>
    <NodeName Default="Razor vs. &quot;/base&quot; to output Json in Umbraco" />
    <SortOrder>29</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[{
  "markup": "\u003Cp\u003EA few months ago I posted about \u003Ca href=\u0022/{localLink:5fc1d04e-b1da-4fd6-885a-cb824335b547}\u0022 type=\u0022document\u0022 title=\u0022Using \u0026quot;/base\u0026quot; to create and consume a JSON string\u0022 data-udi=\u0022umb://document/5fc1d04eb1da4fd6885acb824335b547\u0022\u003E outputting javascript objects (Json) using an umbraco\u0027s \u0022/base\u0022\u003C/a\u003E. As you might\u0027ve noticed, I\u0027ve been becoming a fan of using Razor in Umbraco and had a bit of an epiphany the other day: why not use Razor to create my Json strings!\u003C/p\u003E\n\u003Cp\u003ESo, to do this, I created a new template, let\u0027s call it \u0022RazorJson\u0022 and add a new macro on it:\u003C/p\u003E\n\u003Cpre class=\u0022brush: xml\u0022\u003E\u0026lt;umbraco:Macro FileLocation=\u0022~/macroScripts/give-me-json.cshtml\u0022 runat=\u0022server\u0022 /\u0026gt;\n\u003C/pre\u003E\n\u003Cp\u003EIt\u0027s important to remember that, in Umbraco, you don\u0027t have to create a new page that actually uses this template, if there\u0027s no URL conflicts (a node in the root of the site is not called RazorJson), then you can call a template directly. \u003Cem\u003EDo note that that context in this case will be the home page (more on that later).\u003C/em\u003E\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003EBy going to http://mysite.com/RazorJson I get to see my newly created template, but because it is still empty at the moment I get a blank screen.\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003ELet\u0027s say that I want to output the current node\u0027s properties in Json, we can just do something very simple like this:\u003C/p\u003E\n\u003Cpre class=\u0022brush: c-sharp\u0022\u003E@{\nvar node = new umbraco.NodeFactory.Node(Model.Id);\nvar serializer = new System.Web.Script.Serialization.JavaScriptSerializer();\n}\u003Cbr\u003E\n@Html.Raw(serializer.Serialize(node.Properties))\n\u003C/pre\u003E\n\u003Cp\u003ESo we\u0027re taking the current node\u0027s Id (Model.Id) and instantiate a new Node() from it. Then it\u0027s properties gets serialized into a Json string and that is what\u0027s being shown on the page.\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003EPresto!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\u0022 alt=\u00222011-07-25_104816\u0022 width=\u0022498\u0022 height=\u0022235\u0022 data-udi=\u0022umb://media/b5db251aca444026ba304388b26e57f7\u0022\u003E\u003C/p\u003E\n\u003Cp\u003ENow, to make it a bit more interesting, remember how I said this page would only run in the home page\u0027s context? You could just turn any of your pages into a Json object by going to, for example, http://mysite.com/about?altTemplate=RazorJson\u003Cbr\u003E This will render the \u0022about\u0022 page with the RazorJson template and therefore output all of the \u0022about\u0022 page\u0027s properties in Json notation.\u003C/p\u003E\n\u003Cp\u003EI tweeted about this and got some comments, among which this one:\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022http://twitter.com/#!/agrath/status/94346353345441792\u0022\u003E\u003Cimg src=\u0022\u0022 alt=\u00222011-07-25_102146\u0022 width=\u0022499\u0022 height=\u0022265\u0022 data-udi=\u0022umb://media/58dbcc253a784681a4722c17dafa5279\u0022\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EGareth is right, to create a /base extension, you write a seperate class that handles your businesslogic for you and /base just outputs either XML or a string.\u003C/p\u003E\n\u003Cp\u003EHowever, I think using a template with a Razor script on it seems a bit more powerful. As I\u0027ve shown above, it\u0027s easy to work within the context of a page using \u0026nbsp;altTemplates, but you can also still write any old class that returns a string (or XML) and call that from Razor. In fact, I could just call my existing /base extension from the Razor file because, as you should know, from Razor you can access any old class in your solution.\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003EWhat I do see happening is that people will write @functions in Razor and never extract them into a seperate method. This is great for quick prototyping and if you really are never going to use those functions again, it\u0027s no problem. But it does make it a bit easier to start ignoring seperation of concerns and the DRY (don\u0027t repeat yourself) rule and just start copying functions from one Razor script into the other.\u003C/p\u003E\n\u003Cp\u003EAll I can say is: with great power comes great responsibility. If you want to be able to change your code in few months, make sure to \u003Ca href=\u0022http://www.codinghorror.com/blog/2004/10/a-pragmatic-quick-reference.html\u0022\u003E refactor early and refactor often\u0026nbsp;(#47)\u003C/a\u003E.\u003C/p\u003E",
  "blocks": {
    "contentData": [],
    "settingsData": [],
    "expose": [],
    "Layout": {}
  }
}]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/b5d77cd3b318485f986127c9a25f94dc]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>