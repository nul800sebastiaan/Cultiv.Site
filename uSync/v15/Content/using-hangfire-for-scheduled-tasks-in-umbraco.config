<?xml version="1.0" encoding="utf-8"?>
<Content Key="bc1a255a-b52b-4802-8391-2a46d32f92f2" Alias="Using Hangfire for scheduled tasks in Umbraco" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/UsingHangfireForScheduledTasksInUmbraco</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2019-02-27T15:29:28</CreateDate>
    <NodeName Default="Using Hangfire for scheduled tasks in Umbraco" />
    <SortOrder>49</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>This post is sparked from a question on Twitter about the retired scheduled tasks option we had in Umbraco v7. It's always a bit of a headscratcher when things you relied on in the past go away, now what? </p>
<p><a rel="noopener" href="https://twitter.com/psinke/status/1100344727960993792" target="_blank"><img style="width: 500px; height: 204.46735395189003px;" src="/media/2y5hnlq2/2019-02-27_163214.png" alt="" data-udi="umb://media/f43a3b5c638e42c5acb0b92cbb1e7f3f" /></a></p>
<p>As I told Peter here, we've been greatly impressed with Hangfire in the past few years and I would recommend using it after having used it on <a rel="noopener" href="https://our.umbraco.com" target="_blank" title="Our">Our Umbraco</a> for a few years now.</p>
<p>Older versions of Umbraco came with the option to add a scheduledTasks element to the umbracoSettings.config file. It required you to expose a public URL with no security/authentication on it that Umbraco would ping every minute. Not only was this insecure, in order to ping those URLs, a certain number of request needed to come into the site. No traffic meant tasks wouldn't run, making the system quite unreliable.</p>
<p>I know the Umbraco core guys will tell me that we have an excellent built-in BackgroundTaskRunner as well, but that doesn't come with a nice solid dashboard like Hangfire does. The dashboard is super convenient to allow you to manually trigger tasks and do some debugging, it's very handy.</p>
<h2>Overview</h2>
<p>As a quick overview, here are the moving parts we need to consider when setting up Hangfire for the first time:</p>
<ul>
<li>Make sure we use SQL server (SQL CE is not supported)</li>
<li>Install the NuGet package</li>
<li>Add a few files to App_Plugins to show the dashboard in the backoffice</li>
<li>Make sure to secure the dashboard</li>
<li>Set up scheduled tasks (!)</li>
<li>Bonus: add messages and progress bars into the dashboards</li>
</ul>
<p>After the first few things have been set up, creating the next tasks is pretty easy, add a new method and it will run.</p>
<h2>Setup</h2>
<p>Alright, so you've <a rel="noopener" href="https://our.umbraco.com/documentation/Getting-Started/Setup/Install/install-umbraco-with-nuget" target="_blank">installed Umbraco using NuGet</a> and you have chosen SQL Server (right?).</p>
<p>Great, I have my favorite setup where I create the Umbraco Web App project and add a class library project added to it. I install the UmbracoCms.Core and UmbracoCms.Web into it.</p>
<p>Next up, installing Hangfire, in your Package Manager Console:</p>
<pre>    Install-Package Hangfire
    Install-Package Hangfire.Console
</pre>
<p>I'll get back to the Hangfire.Console package later.</p>
<p>You will need to install both packages in both your project files in VS. Hangfire adds a few dependencies for you as well. </p>
<p><img style="width: 500px; height: 310.3168155970755px;" src="/media/ieaphwvz/2019-02-28_222603.png" alt="" data-udi="umb://media/78e150ba0d6a468680f41f92491ea00c" /></p>
<h2>Dashboard</h2>
<p>Next up: getting a nice dashboard in the backoffice to see what Hangfire is doing, control tasks and see some debug output.</p>
<p>In Umbraco 8, you can create a new dashboard by dropping some files in the App_Plugins folder, I called my plugin "Cultiv.Hangfire", in the ~/App_Plugins/Cultiv.Hangfire/ directory we start with a package.manifest:</p>
<pre>    {
        "dashboards":  [
            {
                "alias": "cultiv.Hangfire",
                "view":  "/App_Plugins/Cultiv.Hangfire/dashboard.html",
                "sections":  [ "settings" ]
            }
        ]
    }
</pre>
<p>This defines the dashboard view (dashboard.html) and tell Umbraco it will go into the Settings section.</p>
<p>At this point a new dashboard will show up in the Settings section and it will be named: [cultiv.Hangfire]</p>
<p>The fact that the name is in square brackets means it's not been translated yet, we can translate it differently for each backoffice user's locale. Let's start with English. We can add a ~/App_Plugins/Cultive.Hangfire/lang/en-US.xml file with the following content:</p>
<pre>    &lt;?xml version="1.0" encoding="utf-8" standalone="yes"?&gt;
    &lt;language&gt;
        &lt;area alias="dashboardTabs"&gt;
            &lt;key alias="cultiv.Hangfire"&gt;Hangfire&lt;/key&gt;
        &lt;/area&gt;
    &lt;/language&gt;
</pre>
<p>We need to load the Hangfire overview page and the easiest way to do that is through an iframe (feels dirty, works great!):</p>
<pre>    &lt;style type="text/css"&gt;
        .hangfireWrapper {
            margin: -30px -20px;
        }
    
        .hangfireContent {
            position: absolute;
            width: 100%;
            height: 100%;
        }
    &lt;/style&gt;
    
    &lt;div class="hangfireWrapper"&gt;
        &lt;iframe name="hangfireIframe" class="hangfireContent" id="Hangfire" frameborder="0" scrolling="yes" marginheight="0" marginwidth="0"
                src="/hangfire/" allowfullscreen="true" style="width:100%!important"
                webkitallowfullscreen="true" mozallowfullscreen="true"
                oallowfullscreen msallowfullscreen="true"&gt;&lt;/iframe&gt;
    &lt;/div&gt;    
</pre>
<p>Finally, we have to tell initialize Hangfire which can be done through and OwinStartup class. Mine looks like this:</p>
<pre>    using Cultiv.Hangfire;
    using Hangfire;
    using Hangfire.Console;
    using Hangfire.SqlServer;
    using Microsoft.Owin;
    using Owin;
    using Umbraco.Web;
    
    [assembly: OwinStartup("UmbracoStandardOwinStartup", typeof(UmbracoStandardOwinStartup))]
    namespace Cultiv.Hangfire
    {
        public class UmbracoStandardOwinStartup : UmbracoDefaultOwinStartup
        {
            public override void Configuration(IAppBuilder app)
            {
                //ensure the default options are configured
                base.Configuration(app);
    
                // Configure hangfire
                var options = new SqlServerStorageOptions { PrepareSchemaIfNecessary = true };
                const string umbracoConnectionName = Umbraco.Core.Constants.System.UmbracoConnectionName;
                var connectionString = System.Configuration
                    .ConfigurationManager
                    .ConnectionStrings[umbracoConnectionName]
                    .ConnectionString;
                
                GlobalConfiguration.Configuration
                    .UseSqlServerStorage(connectionString, options);              
                    
                // Give hangfire a URL and start the server                
                app.UseHangfireDashboard("/hangfire");
                app.UseHangfireServer();
            }
        }
    }
</pre>
<p>Here, we make sure to set up Hangfire to use SQL Server with the connection string we have for Umbraco in our web.config. Hangfire will create a few tables and track some data in there. Now we can tell Umbraco that we want to use this startup class, we can update the owin:appStartup appSetting in the web.config:</p>
<pre>    &lt;add key="owin:appStartup" value="UmbracoStandardOwinStartup" /&gt;
</pre>
<p>We have something that looks a little like this now:</p>
<p><img style="width: 500px; height: 232.16080402010047px;" src="/media/c3sisvbm/2019-02-28_223903.png" alt="" data-udi="umb://media/5b8bea4267f04a39b23a61472b7410c6" /></p>
<h2>Securing the dashboard</h2>
<p>This all great.. but! Now you go to your site URL and add /hangfire and... presto: any unauthenticated user can see and control all the tasks you have scheduled to run. Not ideal, let's fix that.</p>
<p>First off, we can write an authorization filter that will return true if the current logged in user is in the "admin" user group:</p>
<pre>    using System.Linq;
    using System.Web;
    using Hangfire.Dashboard;
    using Umbraco.Web.Composing;
    using Umbraco.Web.Security;
    
    namespace Cultiv.Hangfire
    {
        public class UmbracoAuthorizationFilter : IDashboardAuthorizationFilter
        {
            public bool Authorize(DashboardContext context)
            {
                var http = new HttpContextWrapper(HttpContext.Current);
                var ticket = http.GetUmbracoAuthTicket();
                http.AuthenticateCurrentRequest(ticket, true);
    
                var user = Current.UmbracoContext.Security.CurrentUser;
    
                return user != null &amp;&amp; user.Groups.Any(g =&gt; g.Alias == "admin");
            }
        }
    }
</pre>
<p>Then we need to tell Hangfire to use it, so when we give it a URL, we also give it some options, update like so:</p>
<pre>    var dashboardOptions = new DashboardOptions { Authorization = new[] { new UmbracoAuthorizationFilter() } };
    app.UseHangfireDashboard("/hangfire", dashboardOptions);
</pre>
<p>All secure! If you go to the /hangfire url now, you'll find that you don't see the dashboard unless you're logged in as an admin.</p>
<h2>Schedule tasks</h2>
<p>Yay, we're ready to add new tasks that we want to run, basically we can call any code in our codebase. Here's an example:</p>
<pre>    using Hangfire;
    using Hangfire.Server;
    
    namespace Cultiv.Hangfire
    {
        public class ScheduleHangfireJobs
        {
            public void DoSomething()
            {
                RecurringJob.AddOrUpdate(() =&gt; DoIt(null), Cron.HourInterval(12));
            }
    
            public void DoIt(PerformContext context)
            {
                // Do something!
            }
        }
    }
</pre>
<p>As you can see we're scheduling this task to run every 12 hours. Right now, we're not doing anything but I'll show some demo code in a minute.</p>
<p>The last thing we need to do is to add it to the UmbracoStandardOwinStartup class, after app.UseHangfireServer();</p>
<pre>    // Schedule jobs
    var scheduler = new ScheduleHangfireJobs();
    scheduler.DoSomething();    
</pre>
<p>Your dashboard should be showing that new task now!</p>
<p><img style="width: 500px; height: 347.8691774033697px;" src="/media/rafliy2l/2019-02-28_231103.png" alt="" data-udi="umb://media/aaae53a6f6f4424cb83434bfd22a847c" /></p>
<h2>Debugging and monitoring progress</h2>
<p>So you have code running every 12 hours now. It would be good to know what's going on. Especially if we have some longer running code, it could even be nice to have a progress bar show up.</p>
<p>This is where the Hangfire.Console package comes in. You can add WriteLine statements just like in a console app. We can also add a progress bar. In our UmbracoStandardOwinStartup we can update the global configuration to use the console package:</p>
<pre>    GlobalConfiguration.Configuration
        .UseSqlServerStorage(connectionString, options)
        .UseConsole();    
</pre>
<p>And then in our DoIt method we can do things like:</p>
<pre>    context.WriteLine("Normal text!");

    context.SetTextColor(ConsoleTextColor.Red);
    context.WriteLine("Red text!");
    context.ResetTextColor();

    context.SetTextColor(ConsoleTextColor.Yellow);
    context.WriteLine("Yellow text!");
    context.ResetTextColor();

    // create progress bar
    var progress = context.WriteProgressBar();
    for (var i = 0; i &lt;= 100; i++)
    {
        // update value for previously created progress bar
        progress.SetValue(i);
    }    
</pre>
<p>The result is probably very predictable and hopefully very useful:</p>
<p><img style="width: 500px; height: 146.7236467236467px;" src="/media/kyypwocz/2019-02-28_231940.png" alt="" data-udi="umb://media/22dd7584607849da9bde68b6eb68b29c" /></p>
<p>Lovely! Now.. it's up to you, run all the code you need. The dashboard allows you to start each task manually and you can monitor them on the Jobs tab. </p>
<p>One tip: start slow, don't schedule something to run every 10 seconds until you know it works well otherwise you might be hitting your breakpoints very often. I speak of experience.. ;-)</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/96b525eb5d8f4ba1bb1a11bf58f9c0aa]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[1]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[0]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>