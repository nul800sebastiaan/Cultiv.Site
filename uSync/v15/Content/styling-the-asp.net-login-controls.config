<?xml version="1.0" encoding="utf-8"?>
<Content Key="8bfdd0da-09d9-41ba-848d-2f41dbc3e719" Alias="Styling the ASP.NET login controls" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/StylingTheASPNETLoginControls</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2009-07-27T19:34:36</CreateDate>
    <NodeName Default="Styling the ASP.NET login controls" />
    <SortOrder>8</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>Today, I was handed a piece of HTML which featured a login form. My assignment: create this in Umbraco, using the default Membership provider.</p>
<p>This could be considered as an "Umbraco tip of the week", however this applies to ASP.NET webforms in general as well.</p>
<p>I thought about applying styles and maybe some Javascript hacking to make the login form look exactly like the design. Then, after some searching on the internet, I found out that it is actually extremely easy to apply any layout to your login form.</p>
<p>I started out with this:</p>
<pre class="brush: xml">&lt;form runat="server"&gt;<br>
&lt;asp:Login id="Login1" runat="server" /&gt;<br>
&lt;/form&gt;<br>
</pre>
<p>The designer had made some prettier input boxes with background images and the "Login" button was actually style link.</p>
<p>You can actually use something called a LayoutTemplate from<br> within your login control.</p>
<p>The easiest way to do this is to:</p>
<ul>
<li>Open up your master page in Visual Studio</li>
<li>Go to the designer view Right-click the Login control and choose "Convert to template"</li>
<li>Start customizing the HTML</li>
</ul>
<p>However, if you want to do this manually (and who doesn't <strong>love</strong> some manual tinkering), you have to keep in mind that you need to put at least three controls in your login control:</p>
<ul>
<li>An asp:TextBox control* with an ID of: UserName</li>
<li>An asp:TextBox control* with an ID of: Password</li>
<li>Either an asp:Button an asp:ImageButton or an asp:LinkButton control with a property: CommandName="Login"</li>
</ul>
<p><em>* When I say a TextBox control, I actually mean a web control that implements ITextControl.</em></p>
<p>If you want to show an error when the login fails, add an asp:Literal with an ID of: FailureText</p>
<p>In the end, you'll end up with a piece of code that looks a bit like this (<strong>custom styling removed to keep this nice and short</strong>):</p>
<pre class="brush: xml">&lt;form runat="server"&gt;<br>
&lt;asp:Login id="Login1" runat="server"&gt;<br>
&lt;LayoutTemplate&gt;<br>
&lt;asp:TextBox ID="UserName" runat="server"&gt;&lt;/asp:TextBox&gt;<br>
&lt;asp:TextBox ID="Password" runat="server" TextMode="Password"&gt;&lt;/asp:TextBox&gt;<br>
&lt;asp:LinkButton ID="submitLoginBtn" CommandName="Login" runat="server"&gt;Login&lt;/asp:LinkButton&gt;<br>
&lt;asp:Literal ID="FailureText" runat="server" EnableViewState="False"&gt;&lt;/asp:Literal&gt;<br>
&lt;/LayoutTemplate&gt;<br>
&lt;/asp:Login&gt;<br>
&lt;/form&gt;<br>
</pre>
<p><strong>Update:</strong> As <a href="https://twitter.com/netaddicts/status/2875181611">Dirk</a> and <a href="https://twitter.com/JSkovgaard/status/2875573627">Jan</a> point out, this method will still produce a table surrounding the login controls. This is only a wrapper though, no table element go between the input tags, not to worry.</p>
<p>Dirk is actually working on getting the <a href="http://www.asp.net/CssAdapters/">ASP.NET 2.0 CSS Friendly Control Adapters</a> to <a href="http://our.umbraco.org/forum/developers/extending-umbraco/3137-Anyone-been-using-css-friendly-adapters-for-login-controls"> work with Umbraco</a>. Mind you, these adapters are available for <strong>.NET 2.0 only</strong>.</p>
<p>I personally set-up all my Umbraco installations with the .NET 3.5 config, so this method would not work for me. I don't view this as a big problem, I just style the wrapping table and ignore it.</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/43a1b352f3654dd4b1e46af86e779172]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>