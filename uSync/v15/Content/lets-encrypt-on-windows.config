<?xml version="1.0" encoding="utf-8"?>
<Content Key="30f2acbe-5336-477b-bd56-81bd54da1b05" Alias="Let's Encrypt, on Windows" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/LetsEncryptOnWindows</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2015-12-06T09:51:56</CreateDate>
    <NodeName Default="Let's Encrypt, on Windows" />
    <SortOrder>40</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>I've been learning a lot about security and https in the last year or so and acquiring a certificate has always been a bit of a drag. Sure, <a href="https://dnsimple.com/">DNSimple</a> has made it pretty easy and affordable but it's still $20 a year for something that is 100% automated, all they have to do is keep their systems working and reap the benefits.</p>
<p> </p>
<p><strong>Update</strong>: this is getting much easier already, <a  href="/{localLink:0}" title="Let's Encrypt on Windows revisited">check out the follow up post</a> to this one.</p>
<p> </p>
<p>So I was very excited to learn about a year ago about the formation of <a href="https://letsencrypt.org/"><strong>Let's Encrypt</strong></a>. As they <a href="https://letsencrypt.org/about/">describe</a> it: "<span>Anyone who owns a domain name can use Let’s Encrypt to obtain a trusted certificate at zero cost.". </span></p>
<p><span>Awesome! They have some good sponsors and I'm donor for <a href="https://supporters.eff.org/donate">the Electronic Fronteer Foundation</a>, which started this initiative so in a way, I'm still paying for my certificates, sort of. ;-)</span></p>
<p>I was super excited this week to see that Let's Encrypt was in public beta now and wanted to play with it! But.. of course all of the official tooling focuses on Linux environments and it's been a while for me since I used that. So, I found a cool little project on GitHub called <a href="https://github.com/ebekker/ACMESharp">ACMESharp</a>, implementing the protocol and APIs used by Let's Encrypt using PowerShell.</p>
<p>It took me a while to wrap my head around it but it all makes sense now after playing with it for a while, there's really only 3 steps:</p>
<ol>
<li>You have to agree to the terms of service</li>
<li>You have to prove that you own the domain that you want a certificate for</li>
<li>You request the certificate</li>
</ol>
<p>The <a href="https://github.com/ebekker/ACMESharp/wiki/Example-Usage">documentation for ACMESharp</a> gave me some clues as to how this works but there was still a few "gotcha" moments there. I'll lead you through the PowerShell script that I came up with:</p>
<pre>Import-Module -Name D:\Temp\ACME-posh\ACMEPowerShell.psd1<br>$domain = "cork.nl"<br>$certificiatePassword = "abcd1234"<br>$email = "letsencrypt@cork.nl"<br>$vault = "D:\Vault\{0}\{1}" -f $domain, [guid]::NewGuid()<br>mkdir $vault<br>cd $vault</pre>
<p>Some setup cruft - first of all, you download the ACMESharp <a href="https://github.com/ebekker/ACMESharp/releases">release</a> that's available and unzip it somewhere and import the module you find in there. I make a new folder for each attempt at running this script by generating a new GUID each time.</p>
<p>Next up: pointing to the public beta server that will give you a real, trusted certificate. At first the URL I had here was still pointing at the staging server which gives you cerificates issued by "happy hacker fake CA". Needless to say: I can't use those in production.</p>
<pre>Initialize-ACMEVault -BaseURI https://acme-v01.api.letsencrypt.org/<br>New-ACMERegistration -Contacts mailto:$email<br>Update-ACMERegistration -AcceptTOS</pre>
<p>The terms of service are accepted here and I give them my email address, this was a little confusing as I was waiting for an email to come in to click the "Accept TOS" link but it didn't come. Good, because this is now fully automated, I can just tell them in PowerShell that I accept the terms of service, which I obviously studied closely (not!).</p>
<p>Okay, now the fun part starts: verifying that you own the domain. You ask Let's encrypt to give you a secret randomly generated blob of text that you, as the site owner can put on your website.</p>
<pre>New-ACMEIdentifier -Dns $domain -Alias dns1<br>New-ACMEProviderConfig -WebServerProvider Manual -Alias manualHttpProvider -FilePath $vault\answer.txt<br>Get-ACMEIdentifier -Ref dns1<br>$completedChallenge = Complete-ACMEChallenge -Ref dns1 -Challenge http-01 -ProviderConfig manualHttpProvider</pre>
<p>Note: the FilePath variable in New-ACMEProviderConfig doesn't exist in the 0.7.1 release. I created a pull request to add that to ACMESharp and it was accepted an hour later (yay!). If you use this right now, you'll get an instance of Notepad popping up asking you to complete the FilePath in the bit of JSON that gets put into Notepad. I like automation so I asked if it could just be a variable. </p>
<p>Now, the Complete-ACMEChallenge command returns all the information you need to complete the challenge, I didn't read this properly at first so I wasn't sure what to do. I did it wrong and then the challenge status was set to 'invalid'. Even after correcting my mistake and following the instructions, it was still 'invalid'. "Damn it! Now I'll never be able to get my certificate..". Or so I thought. After Googling for a bit I found out that once a challenge was marked as invalid once, it would never become valid (there's good security reasons behind this, preventing replay attacks). So the trick is to ask for a new challenge, easy!</p>
<p>I added some output to my PowerShell script to remind me exactly what to do:</p>
<pre>$challengeAnswer = ($completedChallenge.Challenges | Where-Object { $_.Type -eq "http-01" }).ChallengeAnswer<br>$key = $challengeAnswer.Key<br>Write-Host ""<br>Write-Host "Create folder structure on $domain like so:"<br>Write-Host "$domain/$key"<br>Write-Host "Put an index.html file in that location that contains:"<br>Write-Host $challengeAnswer.Value</pre>
<p>Which outputs something like this:</p>
<pre>Create folder structure on cork.nl like so:<br>cork.nl/.well-known/acme-challenge/V6CPYDViDCk6X3YWC9wH61kKW2CHtQ-SLACnIcBNFPY<br>Put an index.html file in that location that contains:<br>V6CPYDViDCk6X3YWC9wH61kKW2CHtQ-SLACnIcBNFPY.8uMzTUtlJpLEsyNHnTmLutOPZyFv4VUCFwaqram0gRo</pre>
<p>I can do that! So what needs to happen is when the Let's Encrypt server goes to the URL <em>http://cork.nl/.well-known/acme-challenge/V6CPYDViDCk6X3YWC9wH61kKW2CHtQ-SLACnIcBNFPY</em> the body of the response should contain the secret key: <em>V6CPYDViDCk6X3YWC9wH61kKW2CHtQ-SLACnIcBNFPY.8uMzTUtlJpLEsyNHnTmLutOPZyFv4VUCFwaqram0gRo</em></p>
<p>In this case I do this by placing an index.html in the created folder as I know that IIS will serve that up by default, your server might be configured differently so make sure that it outputs the secret key somehow (and only the secret key, nothing else). </p>
<p>Right! Now we can tell Let's Encrypt: I'm ready, please verify:</p>
<pre>$challenge = Submit-ACMEChallenge -Ref dns1 -Challenge http-01<br>While ($challenge.Status -eq "pending") {<br>  Start-Sleep -m 500 # wait half a second before trying<br>  Write-Host "Status is still 'pending', waiting for it to change..."<br>  $challenge = Update-ACMEIdentifier -Ref dns1<br>}</pre>
<p>Here the challenge is submitted and it might take a second for the status to change from "pending" to "valid" so I ask for an update every half second before continuing.</p>
<p>When the status is "valid" we're golden, go get that cert now!</p>
<pre>New-ACMECertificate -Identifier dns1 -Alias cert1 -Generate<br>$certificateInfo = Submit-ACMECertificate -Ref cert1<br><br>While([string]::IsNullOrEmpty($certificateInfo.IssuerSerialNumber)) {<br> Start-Sleep -m 500 # wait half a second before trying<br> Write-Host "IssuerSerialNumber is not set yet, waiting for it to be populated..."<br> $certificateInfo = Update-ACMECertificate -Ref cert1<br>}<br><br>Get-ACMECertificate -Ref cert1 -ExportPkcs12 cert1-all.pfx -CertificatePassword $certificiatePassword<br><br>Write-Host "All done, there's a cert1-all.pfx file in $vault with password $certificiatePassword for you to use now"</pre>
<p>We're asking Let's Encrypt to generate the certificate and then we do another few pings for the IssuerSerialNumber to update, that's when the certificate has been completely generated. Finally we do a Get-ACMECertificate to receive it and it will be stored in the $vault folder. Note: I'm adding a password to this certificate but this functionality is not yet available in the 0.7.1 release of ACMESharp. Again, this was a specific need that I had for which I sent a pull request which was promptly accepted. </p>
<p>If all this sounds like a lot of work: it is not! </p>
<p>Now that you understand what's going on, this process is repeatable. Which is very necessary because <a href="https://letsencrypt.org/2015/11/09/why-90-days.html">by default these certificates expire every 90 days</a> and will expire even more quickly in the future. This is being done to promote security: a compromised certificate can now only be abused for a maximum of 90 days. It's also being done to promote automation: I built a PowerShell script so I can automate this, they achieved their goal!</p>
<p>The <a href="https://gist.github.com/nul800sebastiaan/31b000874ffa69f4c0af">full PS script is available in a gist</a> for you to copy and use.</p>
<p>Go forth and secure your sites!</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/446087bb32a14244b28ef2c6ae851ccb]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>