<?xml version="1.0" encoding="utf-8"?>
<Content Key="1d3433cb-236a-47dc-922b-4c5fb0b26942" Alias="How to use Razor in Umbraco - Paging" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/HowToUseRazorInUmbracoPaging</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2011-02-17T17:43:28</CreateDate>
    <NodeName Default="How to use Razor in Umbraco - Paging" />
    <SortOrder>26</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>In my <a href="/{localLink:0}" title="How to use Razor in Umbraco">previous post</a> I've shown the basics of using Razor. But I also wanted to find out what works better in XSLT versus in Razor. Luckily, my page needed paging. Paging is something relatively simple that requires a bit of logic, not something that is trivial to do in XSLT. In fact, every time I look at the faux-"for loop" required in XSLT to make it work, my head starts spinning.</p>
<p><strong>Disclaimer: The Razor &nbsp;implementation is still very new and changing rapidly, some of this information might already be outdated.</strong></p>
<p>Paging is also something that can be made really generic, making it nicely reusable for any page.</p>
<p>There is two parts to the paging solution, a normal C# class (but in the App_Code folder, so no compilation required!) that takes the amount of items and the items that should be displayed per page and then does some calculations based on the "page" querystring (come to think of it, I should've actually made that an input variable as well).</p>
<p>I admit that this is a bit verbose and I don't actually need some of these fields, but it's nice to have them in case I need to do something wild with them later.</p>
<pre class="brush: c-sharp">using System;<br>
using System.Web;<br>
<br>
public class Paging<br>
{<br>
public int ItemsPerPage { get; set; }<br>
public int CurrentPage { get; set; }<br>
public int PreviousPage { get; set; }<br>
public int NextPage { get; set; }<br>
public double TotalPages { get; set; }<br>
public int Skip { get; set; }<br>
public int Take { get; set; }<br>
<br>
public static Paging GetPages(int itemCount, int itemsPerPage)<br>
{<br>
int page;<br>
int.TryParse(HttpContext.Current.Request.QueryString["page"], out page);<br>
if (page == 0) page = 1;<br>
<br>
var pages = new Paging { ItemsPerPage = itemsPerPage, CurrentPage = page, PreviousPage = page - 1, NextPage = page + 1, TotalPages = Math.Ceiling(itemCount / (Double)itemsPerPage), Skip = (page*itemsPerPage) - itemsPerPage, Take = itemsPerPage };<br>

return pages;<br>
}<br>
}
</pre>
<p>Then, I needed a really basic way to show the paging. I wanted just some links for the different pages and a "previous" and "next" link. Also, the "current" page shouldn't be clickable. So we bring out a Razor helper (also in the App_Code folder) that can be reused and potentially modified when needed.</p>
<pre class="brush: cshtml">@using umbraco;<br>
<br>
@helper RenderPaging(Paging paging, int currentId) {<br>
if (paging.CurrentPage &gt; 1)<br>
{<br>
&lt;a href="@library.NiceUrl(currentId)?page=@paging.PreviousPage"&gt;&lt; Vorige&lt;/a&gt;<br>
}<br>
<br>
for (var i = 1; i &lt;= paging.TotalPages; i++)<br>
{<br>
if (paging.CurrentPage == i)<br>
{<br>
@i&lt;text&gt;&amp;nbsp;&lt;/text&gt;<br>
}<br>
else<br>
{<br>
&lt;a href="@library.NiceUrl(currentId)?page=@i"&gt;@i&lt;/a&gt;&lt;text&gt;&amp;nbsp;&lt;/text&gt;<br>
}<br>
}<br>
<br>
if (paging.CurrentPage &lt; paging.TotalPages)<br>
{<br>
&lt;a href="@library.NiceUrl(currentId)?page=@paging.NextPage"&gt;Volgende &gt;&lt;/a&gt;<br>
}<br>
}
</pre>
<p>That's all, so now in my overviewpage, I initilialize the paging object and select the records that I want to show for the current page. Note that Skip() and Take() have been added to my Linq query so that I only get the 10 articles that I want.</p>
<pre class="brush: cshtml">@{
var paging = Paging.GetPages(allArticles.Count(), 10);&nbsp;<br>
var selectedArticles = allArticles.OrderByDescending(x =&gt; x.CreateDate).Skip(paging.Skip).Take(paging.Take).ToList();
}<br>
&lt;div class="articleList"&gt;<br>
&lt;ul&gt;<br>
@foreach(var article in selectedArticles) {<br>
&lt;li&gt;@article.NodeName&lt;/li&gt;<br>
}<br>
&lt;/ul&gt;
</pre>
<p>And finally, to render the paging, it's a matter of calling the helper, note that the namespace is once again the name of the .cshtml file (as in the functions in the previous post).</p>
<pre class="brush: cshtml">&lt;div class="paging"&gt;<br>
@PagingTemplate.RenderPaging(paging, Current.Id)<br>
&lt;/div&gt;
</pre>
<p>There you go, from 100+ lines of unreadable XSLT to about 60 lines of nice, clean and easily reusable paging in Razor. What's not to love?</p>
<p>Ps. I still love XSLT, really I do. :-)</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/dedbca1caf1244e3ac2a9e9f0547db6d]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>