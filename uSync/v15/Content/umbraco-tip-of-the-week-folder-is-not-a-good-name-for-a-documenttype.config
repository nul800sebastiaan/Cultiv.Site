<?xml version="1.0" encoding="utf-8"?>
<Content Key="09d3e913-33fa-4406-b9f9-519348d6974d" Alias="Umbraco tip of the week: &quot;Folder&quot; is not a good name for a documentType" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/UmbracoTipOfTheWeekFolderIsNotAGoodNameForADocumentType</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2009-09-06T14:33:16</CreateDate>
    <NodeName Default="Umbraco tip of the week: &quot;Folder&quot; is not a good name for a documentType" />
    <SortOrder>9</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>This is a really short tip: Don't create a new documentType with the alias "Folder". This alias has already been used by folders in the media section.</p>
<p>In normal day-to-day use this is not a problem, but it becomes one when you try to programatically access the documentType by alias (DocumentType.GetByAlias("Folder")). I ran into this problem the other day and couldn't figure out why I was getting unexpected results until I had a look at what the ID actually represented, a media folder.</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/3466737bd49743908c7c1743a4117c13]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>