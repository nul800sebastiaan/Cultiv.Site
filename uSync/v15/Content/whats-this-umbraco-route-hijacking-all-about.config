<?xml version="1.0" encoding="utf-8"?>
<Content Key="3c73592c-98c7-45d9-af2c-d8f6b93ccdf9" Alias="What's this Umbraco route hijacking all about?" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/WhatsThisUmbracoRouteHijackingAllAbout</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2014-01-27T00:01:51</CreateDate>
    <NodeName Default="What's this Umbraco route hijacking all about?" />
    <SortOrder>37</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>So this site is now running on Umbraco 7 and has a snazzy new template. In order to make the homepage load a bit faster I thought it would be a good idea to introduce some paging so that the size of the page isn't so large.</p>
<p>I know I can hack paging as inline Razor script in the view but I thought I'd check out what the hype was all about with regards to <a href="http://our.umbraco.org/documentation/Reference/Mvc/custom-controllers" target="_blank">route hijacking</a>. </p>
<p>What is route hijacking? Well, it's a way to tell Umbraco that you want to add custom code to certain document types. It can be compared to using partial classes in webforms to insert your own code in masterpages (but better! ;)).</p>
<p>The blog posts are just children of the blog page, as noted <a href="/moving-from-datefolders-to-umbracos-new-listview/">in my previous article</a>. Which means that I just need a list of content items and do a bit of .Skip() and .Take() on them before rendering them on the page.</p>
<p>The examples in this post are very simple to keep it readable, but <a href="https://gist.github.com/nul800sebastiaan/8641249" target="_blank">the full examples are available in a Gist</a> as well.</p>
<p>So: this is MVC, which means I'll need three things, guess what they are?</p>
<h3>Model</h3>
<p>My model mainly consists of content, but also some properties to track the paging (total pages, current page, previous/next page number, etc). I can mix those in with the properties of the current page easily by making my model inherit from RenderBase and asking for the "CurrentPage" in the constructor method.</p>
<pre>using Umbraco.Web;
using Umbraco.Web.Models;

namespace Cultiv.Models
{
    public class BlogOverview : RenderModel
    {
        public BlogOverview(IPublishedContent content) : <br>          base(content) <br>        { }
        
        public int Page { get; set; }
        
        // More custom properties
    }
}</pre>
<h3>View</h3>
<p>The view will have access to all of our custom properties, one if which is the current page number (more on that later, in the controller). The output of the view below will be a header with the page number in it and the name of the current page (which will be "Blog" because this view is rendered on the "Blog" page).</p>
<p>I'm also using the layout that I've created for all the other pages, not using route hijacking. So everything is exactly the same except I have more properties to use. In the final version (not completely included for brevity, I can also do</p>
<pre>foreach(var post in Model.PagedBlogPosts) { //etc }</pre>
<p>Which is much nicer than</p>
<pre>foreach(var post in Model.Content.Children.OrderByDescending(c =&gt; c.CreateDate).Take(5).Skip(0)) { //etc }</pre>
<p>Note that in order for the view to understand whats going on, it needs to inherit from UmbracoViewPage with the type BlogOverview (again, this is the document type's alias). Here's an example of the view:</p>
<pre>@using Cultiv.Models
@inherits UmbracoViewPage&lt;BlogOverview&gt;
@{
    Layout = "~/Views/Site.cshtml";
}
&lt;h3&gt;This is page number @Model.Page&lt;/h3&gt;
&lt;p&gt;The current page's name is @Model.Content.Name&lt;/p&gt;</pre>
<h3>Controller</h3>
<p>I haven't explained how this route hijacking actually works. In this example, I'm making a controller with the same name as the document type's alias (BlogOverview). My template name is BlogOverview as well so the ActionResult method in this Controller is also named BlogOverview. In this case the document type alias and the template name are the same but if the template was named BlogPosts then the method would also need to be named BlogPosts.</p>
<p>Note that the Controller class name has to end with the world Controller (as usual with ASP.NET MVC) and inherit from Umbraco's RenderMvcController so that we get access to the current page and current template.</p>
<p>In this example I'll do some very simple processing: using model binding, the querystring value for the page number is set when the request comes in. If there's no querystring (?page=x is missing from the URL) then I'll set the current page number to 1. Remember I rendered the page number in my view earlier.</p>
<pre>using System.Web.Mvc;
using Cultiv.Models;
using Umbraco.Web.Mvc;

namespace Cultiv.Controllers
{
    public class BlogOverviewController : RenderMvcController
    {
        public ActionResult BlogOverview(RenderModel model)
        {<br>            var blogOverviewModel = new BlogOverview(model.Content);<br><br>            if (blogOverviewModel.Page == 0) // default value for int
                blogOverviewModel.Page = 1;

            // do paging 

            return CurrentTemplate(blogOverviewModel);
        }
    }
}
</pre>
<p>For brevity's sake, I've left out the boring paging but as you can see if you go to the homepage of this site then the paging at the bottom actually works. ;-)</p>
<p>I hope this was helpful in showing when route hijacking can come in handy: if you want to do some processing on the server but want to keep your model simple, make sure to consider executing the code in a controller and keep your view very simple (or "dumb" as people like to say).</p>
<p>The full code for <a href="https://gist.github.com/nul800sebastiaan/8641249" target="_blank">the model view and controller are available in a Gist</a> for you to peruse.</p>
<p>Note: Yes, I know I could also have used a SurfaceController with a ChildActionOnly Index method and rendered that from my template but I like exploring and route hijacking was new to me. Works pretty well for my purposes here!</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/03a304f4b27f4292b48572df4d3a406f]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>