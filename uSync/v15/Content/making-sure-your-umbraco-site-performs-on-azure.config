<?xml version="1.0" encoding="utf-8"?>
<Content Key="61900023-d419-4bf7-ae38-f7cf3e046293" Alias="Making sure your Umbraco site performs on Azure" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/MakingSureYourUmbracoSitePerformsOnAzure</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2016-03-26T10:00:14</CreateDate>
    <NodeName Default="Making sure your Umbraco site performs on Azure" />
    <SortOrder>43</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[{
  "markup": "\u003Cp\u003E\u003Ca href=\u0022https://azure.microsoft.com/en-us/services/app-service/web/\u0022\u003EAzure Web Apps\u003C/a\u003E (previously known as Azure Websites) is an excellent service that can be used to host your Umbraco website in a cost effective way. I will not go into deploying your site to Azure, this is something that can be done in different ways and works exactly the same for Umbraco as it would work for any other ASP.NET website. Google it.\u003C/p\u003E\n\u003Cp\u003EInstead, this post focuses on making sure your performance on Azure is optimized.\u003C/p\u003E\n\u003Ch3\u003ESync Examine indexes\u003C/h3\u003E\n\u003Cp\u003EFirst and foremost there\u0027s something you need to understand about how the server structure is set up behind Azure Web Apps (AWA). The two most important servers in the setup are the Web Worker (the machine that has IIS on it which is hosting your site) and the File Server.\u00A0Whenever a new website on\u00A0AWA spins up, it gets assigned to a Web Worker which has enough capacity to run another web site on it, there may be dozens / hundreds of other sites running on it. Sometimes the\u00A0Web Worker needs maintenance at which point your site will be re-allocated to another available Web Worker and your site will move there. I say \u0022move\u0022\u00A0but there\u0027s one important thing to understand here: the files used in your website live on the File Server and not on the Web Worker. All that the Web Worker does is it sets up a network path (UNC path) and tells IIS: there you go, my files are here. This points to the File Server, not to a path on the local machine, even though a UNC path very much behaves like a local path.\u003C/p\u003E\n\u003Cp\u003EWhy is this important? One word: latency. Every time the Web Worker gets instructed to change a file on disk it has to reach out over a network connection to a different server and make that change. This is a relatively slow process. You will not notice this latency when doing \u0022normal\u0022 operations like, for example, saving a template in Umbraco.\u003C/p\u003E\n\u003Cp\u003EHowever, where you will notice this latency is when it comes to disk operations that need to be highly performant. One of the best examples here in both read and write latency are\u00A0the Examine indexes. Umbraco comes with a Lucene.Net implementation called Examine and it is fast.. really fast. It can be this fast because it relies on speedy\u00A0access to it\u0027s data, the stored indexes on disk. Each time you ask for a media item, a query gets sent off to Examine to find the media item quickly. Each time you save a document in Umbraco, the saved information gets sent into Examine to be indexed. Each time you build a custom Examine searcher and use it.. you get the idea.\u003C/p\u003E\n\u003Cp\u003ESo, long story short: you want your Examine indexes to live on the local disk of the Web Worker instead of on the remote File Server. This can be done as of Umbraco 7.2.8\u00A0by adding\u00A0the following\u00A0attribute to all of your indexers and searchers: useTempStorage=\u0022Sync\u0022.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EUpdate:\u003C/strong\u003E it has come to my attention that, for now, it\u0027s best not to include \u003Ca href=\u0022https://github.com/umbraco/Umbraco-CMS/blob/dev-v7/src/Umbraco.Web.UI/config/ExamineIndex.config#L12\u0022\u003Ethe machine name in your ExamineIndex.config\u003C/a\u003E, so if you\u0027ve previously added that you might want to consider removing that\u00A0for the time being. Note that your indexes will\u00A0be rebuilt when you do this, so if this is a long process make sure to plan for some downtime. More information \u003Ca href=\u0022https://our.umbraco.org/forum/developers/extending-umbraco/74731-examine-corruption-issues#comment-243496\u0022\u003Ecan be found in this forum topic\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThe \u0027Sync\u0027 setting will store your indexes in ASP.NET\u0027s temporary file folder which is on the local file system (so: on the Web Worker). Any time the index is updated, this setting will ensure that both the locally created indexes and the normal indexes are written to. This will ensure that when the app is restarted or the local (Web Worker) temp files are cleared out that the index files can be restored from the centrally stored index files (on the File Server). If you see issues with this syncing process (in your logs), you could change this value to be \u0027LocalOnly\u0027 which will only persist the index files to the local file system in ASP.Net temp files.\u003C/p\u003E\n\u003Cp\u003ESetting the indexes to \u0022Sync\u0022 will ensure that your websites starts as fast as it can after\u00A0it\u0027s been moved to a new Web Worker, the indexes will be copied from the File Server to the Web Worker\u00A0during application startup. If you set the setting to \u0022LocalOnly\u0022 your indexes will only ever exist on the Web Workers and thus need to be rebuilt every time your site is moved to a new Web Worker. This could work just\u00A0fine for most sites but there\u0027s no performance to be gained from it and if you have a large index, this may slow down your website on startup significantly as it needs to rebuild all of the indexes from scratch.\u003C/p\u003E\n\u003Ch3\u003E\u003Cspan\u003EFcnMode\u003C/span\u003E\u003C/h3\u003E\n\u003Cp\u003EShannon has written \u003Ca href=\u0022http://shazwazza.com/post/all-about-aspnet-file-change-notification-fcn/\u0022\u003Ean in-depth blog post about File Change Notifications\u003C/a\u003E already so I\u0027m not going to repeat that. We have shipped with \u0060fcnMode=\u0022Single\u0022\u0060 since Umbraco 7.3.5 and you should also set that attribute on your system.web/httpRuntime element in your web.config.\u003C/p\u003E\n\u003Cp\u003EWe have made this change to all of our Web Workers on \u003Ca href=\u0022http://umbraco.com/cloud\u0022\u003EUmbraco as a Service\u003C/a\u003E too and to quote Shannon from that blog post above: \u00A0\u003C/p\u003E\n\u003Cp\u003E\u003Cspan class=\u0022quote\u0022\u003ETo solve this issue we changed fcnMode=\u201DSingle\u201D in the machine.config so that all sites would effectively use \u201CSingle\u201D\u2026 and the result was instant: No more constant app restarts, file server performance was instantly back to normal. And as far as I can tell, there has been no downside to running FCNMode in Single.\u003C/span\u003E\u003C/p\u003E\n\u003Cp\u003EThat blog post is now 6 months old and with ~2000\u00A0sites still happily running at great performance we\u0027re now confident that fcnMode=\u0022Single\u0022 is the only way to run any ASP.NET website. If you\u0027re on Umbraco versions older than 7.3.5, you can just add this attribute yourself, it will work on any version of Umbraco.\u003C/p\u003E\n\u003Ch3\u003ELogs\u003C/h3\u003E\n\u003Cp\u003EUmbraco uses Log4Net for logging debug information and errors. A few people with very active sites have found that the logger started slowing down the website\u00A0so much it was easily noticeable and the performance hit could be tracked back to the logger. This occurred even though the logger was asynchronous and \u0022shouldn\u0027t\u0022 have affected website performance. Since version 7.3.0 we\u0027ve been shipping with a new logger that should take more of the stress off of your website. Even so, we do log a lot of information and all that logging can quickly start taking up a lot of disk space.\u00A0\u003C/p\u003E\n\u003Cp\u003EWe recommend at least for your live website to set the Log Priority to \u0022WARN\u0022 instead of the default \u0022INFO\u0022 and when the site has been running well for a while and you\u0027re comfortable you could even swith to \u0022ERROR\u0022.\u003C/p\u003E\n\u003Ch3\u003EDebug\u003C/h3\u003E\n\u003Cp\u003EIt\u0027s your live environment. So what do you do in your web.config? Yes, indeed, you set debug mode to \u0022false\u0022 and customErrors mode to \u0022RemoteOnly\u0022. Right? Right! You also built your dlls in Release mode before deploying them, right? Right!\u003C/p\u003E\n\u003Ch3\u003EWhat else\u003C/h3\u003E\n\u003Cp\u003EFar be it for\u00A0me to say that you might have produced some badly performing code. You\u0027re a professional programmer who has been at it for years and you know exactly what you\u0027re doing, right? Well on the off chance that you had a minor glitch in your brain, maybe you should check to make sure.\u003C/p\u003E\n\u003Cp\u003EThe biggest offense\u00A0we\u00A0see these days is people using \u003Ca href=\u0022https://our.umbraco.org/documentation/reference/management/services/\u0022\u003Ethe ContentService and other Services\u003C/a\u003E in their frontend\u00A0queries. Please, please don\u0027t do this, it goes straight to the database and kills your performance, especially if you make queries as crazy as: find\u00A0the root node and then query all of it\u0027s descendants (that\u0027s ALL nodes in Umbraco!) to find the property \u0022thisIsAnAmazingArticle\u0022 and then ToList() it and show only the first article with this property set to true. Stop. :)\u003C/p\u003E\n\u003Cp\u003EAnother thing that seems to be a pattern (and it\u0027s certainly an anti-pattern) is that people\u00A0make the exact same mistake that I once made for \u003Ca href=\u0022https://our.umbraco.org/\u0022\u003EOur Umbraco\u003C/a\u003E\u0027s download section: I needed a download counter.. so, hey I know: let\u0027s add a property \u0022counter\u0022 on each Download Document Type and save \u0026amp; publish the Download page each time someone downloads this version, increase the counter with 1. Trust me, this doesn\u0027t scale. Ever. Please do not put counters on your document types and increase them programmatically. It\u0027s just as much work to create a simple table with a \u0060nodeId\u0060 and \u0060count\u0060 column and update that one with a bit of PetaPoco.\u003C/p\u003E\n\u003Cp\u003ECaching can be super useful if you know that you need to do something that you can\u0027t optimize the performance of right now (or ever). Use Umbraco\u0027s Macro caching, or \u003Ca href=\u0022https://our.umbraco.org/documentation/reference/cache/updating-cache\u0022\u003EUmbraco\u0027s ApplicationCache\u003C/a\u003E, or implement \u003Ca href=\u0022http://mayflymedia.co.uk/blog/tech-breakfast/mvc-donut-caching/\u0022\u003EDonut Caching\u003C/a\u003E, etc. Even\u00A0a very short cache of a few minutes can make a world of difference if you have 10 requests per second doing the exact same work 10 times. Note, however, that caching really should be a last resort after you\u0027ve tried to optimize as much as you can. With caching comes cache invalidation and that can be hard or \u003Ca href=\u0022http://www.forbes.com/sites/insertcoin/2015/12/25/steam-is-randomly-logging-users-into-other-peoples-accounts-and-exposing-their-information/#11c0891f68c5\u0022\u003Eeven dangerous\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EAlso, I won\u0027t JUST blame you: we have had some issues with Umbraco performance and some, let\u0027s say \u0022interesting\u0022 bugs in older versions.\u00A0Make sure to upgrade to the latest version of Umbraco that you can upgrade to. If you have to stick with patch upgrades then 7.2.8 and 7.3.8 are both considered stable, but if you can do minor upgrades, definitely consider going to at least 7.3.8. Of course if you like receiving regular update, then going to version 7.4.2 and keeping up with the latest versions would be much preferred (remember, I \u003Ca data-id=\u00221679\u0022 href=\u0022/{localLink:06fe3c53-e8db-4a06-ab90-267b081a9a1d}\u0022 type=\u0022document\u0022 title=\u0022How to diagnose Umbraco upgrade problems\u0022 data-udi=\u0022umb://document/06fe3c53e8db4a06ab90267b081a9a1d\u0022\u003Eblogged about upgrading Umbraco\u003C/a\u003E recently as well).\u003C/p\u003E\n\u003Cp\u003EMicrosoft also makes mistakes, \u003Ca href=\u0022http://issues.umbraco.org/issue/U4-6338\u0022\u003Ethis one is a pretty huge bug and you need to be aware of it\u003C/a\u003E and manually install the patch if you\u0027re using Windows Server 2012R2.\u003C/p\u003E\n\u003Ch3\u003EConclusion\u003C/h3\u003E\n\u003Cp\u003EThis post is partly the result of \u003Ca href=\u0022https://our.umbraco.org/forum/umbraco-7/using-umbraco-7/72801-fixing-poor-performance-on-azure#comment-240446\u0022\u003Equestions and answers gathered over the last few months in this forum post\u003C/a\u003E, it might be good to read through that to find some more specific examples that might apply to your situation.\u00A0I hope this helps you optimize you Azure hosted Umbraco site (pro-tip: a lot of these tips also help on any other hosting provider).\u00A0\u003C/p\u003E",
  "blocks": {
    "contentData": [],
    "settingsData": [],
    "expose": [],
    "Layout": {}
  }
}]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/136343cf6a1c40caad47bd711f56ac0d]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[1]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>