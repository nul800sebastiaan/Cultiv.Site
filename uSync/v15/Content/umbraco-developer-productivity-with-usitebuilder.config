<?xml version="1.0" encoding="utf-8"?>
<Content Key="0920d9f0-19e4-4337-b89d-5e3a2aa55914" Alias="Umbraco developer productivity with uSiteBuilder" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/UmbracoDeveloperProductivityWithUSiteBuilder</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2011-05-09T08:30:34</CreateDate>
    <NodeName Default="Umbraco developer productivity with uSiteBuilder" />
    <SortOrder>27</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[{
  "markup": "\u003Cp\u003EAfter having used Umbraco for 2 years, I keep looking for ways to make my life even easier. As you may know, initial deployment of an Umbraco site is super easy. But then, a few weeks later, you\u0027ve enhanced your site, added fields and macros and suddenly.. you have to remember and repeat those steps on your live server..\u003C/p\u003E\n\u003Cp\u003EThis is not what you want, it\u0027s labor intensive, prone to mistakes and there\u0027s no way to do any kind of continuous integration. The kind people at \u003Ca href=\u0022http://www.vegaitsourcing.rs/\u0022\u003EVega IT Sourcing\u003C/a\u003E must have felt the same way and developed a solution for this called \u003Ca href=\u0022http://usitebuilder.vegaitsourcing.rs/\u0022\u003EuSiteBuilder\u003C/a\u003E.\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003EThe setup that I\u0027ve chosen for this is a little bit different from the default that you get when out of the box. I\u0027ve just downloaded and built \u003Ca href=\u0022http://usitebuilder.codeplex.com/SourceControl/list/changesets\u0022\u003E the source of uSiteBuilder\u003C/a\u003E and from the \u0022Vega.USiteBuilder\\bin\\Debug\u0022 folder I took the\u0026nbsp;Vega.USiteBuilder.dll to use in my project.\u003C/p\u003E\n\u003Cp\u003EMy default Umbraco solution looks a bit like this:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\u0022 alt=\u0022Umbracosolution\u0022 width=\u0022215\u0022 height=\u0022649\u0022 data-udi=\u0022umb://media/2bc61ede3c0b43dd803929476e2028e6\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EMore on how I set this up can be found in the \u003Ca href=\u0022/{localLink:dc3d7a4e-076b-4591-ae33-360e41dd02a8}\u0022 type=\u0022document\u0022 title=\u0022Easily debug your custom Umbraco user controls in Visual Studio\u0022 data-udi=\u0022umb://document/dc3d7a4e076b4591ae33360e41dd02a8\u0022\u003E Easily debug your custom Umbraco user controls in Visual Studio blog post\u003C/a\u003E. I still use that setup, except now in VS2010 and I only have 2 projects in there: the Umbraco site and my custom code organized in folders.\u003C/p\u003E\n\u003Cp\u003EI reference the uSiteBuilder dll in the \u0022SomeCompany.Extensions\u0022 project and then I\u0027m ready to get started.\u003C/p\u003E\n\u003Cp\u003EMy post-build events look like this by the way:\u003C/p\u003E\n\u003Cpre class=\u0022brush: xml\u0022\u003EXCOPY \u0022$(ProjectDir)bin\\SomeCompany.*\u0022 \u0022$(ProjectDir)..\\Umbraco\\bin\\\u0022 /y\u003Cbr\u003E\nXCOPY \u0022$(ProjectDir)UserControls\\*.ascx\u0022 \u0022$(ProjectDir)..\\Umbraco\\UserControls\\\u0022 /y\u003Cbr\u003E\nXCOPY \u0022$(ProjectDir)Masterpages\\*.master\u0022 \u0022$(ProjectDir)..\\Umbraco\\masterpages\\\u0022 /d /y\n\u003C/pre\u003E\n\u003Cp\u003EI really don\u0027t want to build my project every time I make a change to a masterpage file, I change my masterpages in the Umbraco site, not in the Extensions project. So for masterpages, I\u0027ve added the extra /d parameter that will make sure only files that are newer in the Extensions project get copied to the website.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EMaster pages\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003ELet\u0027s start with setting up a master page for the site, called Main, and a nested master page for the content of my TextPages.\u003C/p\u003E\n\u003Cp\u003EJust right click in the Masterpages folder in the \u0022SomeCompany.Extensions\u0022 project and create a new Masterpage called Main. The one thing we\u0027re going to change for now is setting the MasterPageFile to Umbraco\u0027s default MasterPage.\u003C/p\u003E\n\u003Cpre class=\u0022brush: xml\u0022\u003E\u0026lt;%@ Master Language=\u0022C#\u0022 AutoEventWireup=\u0022true\u0022\u003Cbr\u003E\nCodeBehind=\u0022Main.master.cs\u0022\u003Cbr\u003E\nInherits=\u0022SomeCompany.Extensions.MasterPages.Main\u0022\u003Cbr\u003E\nMasterPageFile=\u0022~/umbraco/masterpages/default.master\u0022 %\u0026gt;\n\u003C/pre\u003E\n\u003Cp\u003EWe\u0027ll get back to this Masterpage later.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EDocument Types\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003EThe most important feature of uSiteBuilder is that you can create your document types in code, instead of through the Umbraco interface. You just build a dll and drop it in your site\u0027s /bin folder. Once you do, the document type definitions that you\u0027ve made get updated in Umbraco\u0027s database and, presto, no more manual deployments for document types!\u003C/p\u003E\n\u003Cp\u003EAs you \u003Ca href=\u0022/{localLink:7bc7fd85-a171-43c5-9584-baf6ff2125c0}\u0022 type=\u0022document\u0022 title=\u0022Tip of the week: The \u0026quot;ultimate\u0026quot; site structure setup\u0022 data-udi=\u0022umb://document/7bc7fd85a17143c59584baf6ff2125c0\u0022\u003E might have read\u003C/a\u003E, I set up all of my sites using a SiteSettings node first and everything else goes under that.\u0026nbsp;My goal is to get a document type structure that looks like this:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\u0022 alt=\u0022Documenttypes\u0022 width=\u0022142\u0022 height=\u002279\u0022 data-udi=\u0022umb://media/8b93d518e78c43899a3e3ef9c04680a3\u0022\u003E\u003C/p\u003E\n\u003Cp\u003ESo let\u0027s get started with some code in DocumentTypes\\SiteSettings.cs:\u003C/p\u003E\n\u003Cpre class=\u0022brush: c-sharp\u0022\u003Eusing Vega.USiteBuilder;\u003Cbr\u003E\n\u003Cbr\u003E\nnamespace SomeCompany.Extensions.DocumentTypes\u003Cbr\u003E\n{\u003Cbr\u003E\n[DocumentType(Name = \u0022Site Settings\u0022, IconUrl = \u0022house.png\u0022, Thumbnail = \u0022developer.png\u0022, AllowedChildNodeTypes = new[] { typeof(TextPage) })]\u003Cbr\u003E\npublic class SiteSettings : DocumentTypeBase\u003Cbr\u003E\n{\u003Cbr\u003E\n[DocumentTypeProperty(UmbracoPropertyType.ContentPicker, Name = \u0022Homepage\u0022, Tab = \u0022Settings\u0022, Description = \u0022The item that you pick here will be the homepage of your site.\u0022)]\u003Cbr\u003E\npublic string umbracoInternalRedirectId { get; set; }\u003Cbr\u003E\n\u003Cbr\u003E\n[DocumentTypeProperty(UmbracoPropertyType.TextboxMultiple, Name = \u0022Google Analytics Code\u0022, Tab = \u0022Settings\u0022, Description = \u0022Paste your Google Analytics code here to get statistics of your website\u0022)]\u003Cbr\u003E\npublic string googleAnalyticsCode { get; set; }\u003Cbr\u003E\n}\u003Cbr\u003E\n}\n\u003C/pre\u003E\n\u003Cp\u003EMake sure to go through the\u0026nbsp;\u003Ca href=\u0022http://usitebuilder.vegaitsourcing.rs/tutorials\u0022\u003EuSiteBuilder tutorials\u003C/a\u003E\u0026nbsp;if you\u0027re not sure what\u0027s actually going on here.\u003C/p\u003E\n\u003Cp\u003EGreat, that\u0027s that sorted, we can continue to the PageSettings document type:\u003C/p\u003E\n\u003Cpre class=\u0022brush: c-sharp\u0022\u003Eusing Vega.USiteBuilder;\u003Cbr\u003E\n\u003Cbr\u003E\nnamespace SomeCompany.Extensions.DocumentTypes\u003Cbr\u003E\n{\u003Cbr\u003E\n[DocumentType(Name = \u0022Page Settings\u0022, IconUrl = \u0022folder.gif\u0022, Thumbnail = \u0022folder.png\u0022, AllowedChildNodeTypes = new[] { typeof(TextPage) })]\u003Cbr\u003E\npublic class PageSettings : DocumentTypeBase\u003Cbr\u003E\n{\u003Cbr\u003E\n[DocumentTypeProperty(UmbracoPropertyType.Textstring, Name = \u0022Page title\u0022, Tab = \u0022Page settings\u0022)]\u003Cbr\u003E\npublic string pageTitle { get; set; }\u003Cbr\u003E\n\u003Cbr\u003E\n[DocumentTypeProperty(UmbracoPropertyType.Textstring, Name = \u0022Meta title\u0022, Tab = \u0022Page settings\u0022)]\u003Cbr\u003E\npublic string metaTitle { get; set; }\u003Cbr\u003E\n\u003Cbr\u003E\n[DocumentTypeProperty(UmbracoPropertyType.Textstring, Name = \u0022Meta description\u0022, Tab = \u0022Page settings\u0022)]\u003Cbr\u003E\npublic string metaDescription { get; set; }\u003Cbr\u003E\n\u003Cbr\u003E\n[DocumentTypeProperty(UmbracoPropertyType.TrueFalse, Name = \u0022Hide in navigation?\u0022, Tab = \u0022Navigation\u0022)]\u003Cbr\u003E\npublic string umbracoNaviHide { get; set; }\u003Cbr\u003E\n}\u003Cbr\u003E\n}\n\u003C/pre\u003E\n\u003Cp\u003EThe PageSettings document type is just a set of generic properties that I am going to need on all of my publishable content pages. I would generally also add checkboxes for \u0022Hide in sitemap\u0022, \u0022Show in main menu\u0022, \u0022Show in footer menu\u0022, etcetera.\u003C/p\u003E\n\u003Cp\u003EI\u0027ve cheated a little bit here, as you can see, I am allowing documents of type \u0022TextPage\u0022 under the SiteSettings, but we haven\u0027t actually defined the TextPage yet. We\u0027ll fix that right now:\u0026nbsp;\u003C/p\u003E\n\u003Cpre class=\u0022brush: c-sharp\u0022\u003Eusing Vega.USiteBuilder;\u003Cbr\u003E\n\u003Cbr\u003E\nnamespace SomeCompany.Extensions.DocumentTypes\u003Cbr\u003E\n{\u003Cbr\u003E\n[DocumentType(Name = \u0022Text page\u0022, IconUrl = \u0022page.png\u0022, Thumbnail = \u0022docWithImage.png\u0022, AllowedTemplates = new [] { \u0022TextPage\u0022 }, DefaultTemplate = typeof (TextPage))]\u003Cbr\u003E\npublic class TextPage : PageSettings\u003Cbr\u003E\n{\u003Cbr\u003E\n[DocumentTypeProperty(UmbracoPropertyType.RichtextEditor, Name = \u0022Content\u0022, Tab = \u0022Content\u0022, Description = \u0022\u0022)]\u003Cbr\u003E\npublic string bodyText { get; set; }\u003Cbr\u003E\n}\u003Cbr\u003E\n}\n\u003C/pre\u003E\n\u003Cp\u003EI am inheriting from the PageSettings class that I\u0027ve just created so that TextPage will be nested under it.\u003C/p\u003E\n\u003Cp\u003EAlso, I have set the AllowedTemplates to TextPage, which doesn\u0027t exist yet. So it can now be created.\u003C/p\u003E\n\u003Cp\u003EI\u0027ve created a ContentPlaceHolder in Main.master:\u003C/p\u003E\n\u003Cpre class=\u0022brush: xml\u0022\u003E\u0026lt;asp:ContentPlaceHolder Id=\u0022body\u0022 runat=\u0022server\u0022\u0026gt;\u0026lt;/asp:ContentPlaceHolder\u0026gt;\n\u003C/pre\u003E\n\u003Cp\u003ENow I need to create the TextPage Masterpage by adding a new nested masterpage, based on Main.master:\u003C/p\u003E\n\u003Cp\u003E\u003Cspan\u003E\u003Cimg src=\u0022\u0022 alt=\u0022Nestedmaster\u0022 width=\u0022497\u0022 height=\u0022300\u0022 data-udi=\u0022umb://media/3c7e7d664a374ca8a352b9bc7fccd50f\u0022\u003E\u003C/span\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cspan\u003EWe could just copy both masterpages (Main \u0026amp; TextPage) over to the site, but it will not do anything as we haven\u0027t told uSiteBuilder to pick it up and create the templates in Umbraco.\u0026nbsp;\u003C/span\u003E\u003C/p\u003E\n\u003Cp\u003ESo, as promised, we\u0027re getting back to Main.master. Go into the codebehind and change it to inherit from SiteSettings, like so:\u003C/p\u003E\n\u003Cpre class=\u0022brush: c-sharp\u0022\u003Epublic partial class Main : Vega.USiteBuilder.TemplateBase\u0026lt;DocumentTypes.SiteSettings\u0026gt;\n\u003C/pre\u003E\n\u003Cp\u003EA similar inherit is necessary for TextPage, but it will be from the TextPage document type. This will make sure that the docType knows how to find the template that it is allowed to use:\u003C/p\u003E\n\u003Cpre class=\u0022brush: c-sharp\u0022\u003Epublic partial class TextPage : Vega.USiteBuilder.TemplateBase\u0026lt;DocumentTypes.TextPage\u0026gt;\n\u003C/pre\u003E\n\u003Cp\u003E\u003Cstrong\u003EWhat can we not do?\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003EThere has been a lot of good news in this article so far. It\u0027s easy to create document types and templates and I haven\u0027t covered this, but it\u0027s also very easy to create UserControl macros from uSiteBuilder.\u003C/p\u003E\n\u003Cp\u003EBut uSiteBuilder is still incomplete at the moment. There\u0027s no way to create XSLT macros and you cannot predefine the sorting of tabs on your document types (although you can just sort them manually in Umbraco\u0027s interface, that works just fine). Furthermore, there\u0027s no way to create media types either.\u003C/p\u003E\n\u003Cp\u003EAs this is an open source project, I have good hopes that someone will create the missing bits as they need them. For now, I\u0027ve been able to work around them really well though.\u003C/p\u003E\n\u003Cp\u003EThat being said, it only took me about an hour or to get started with it and even if I would still need to do some things manually, I can still gain a lot in productivity for the supported features, which is fantastic!\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EPutting it all together\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003EThis is a completely reusable way of creating your site structure. In your next project you can just start out with these basic document types and templates and build them out as needed.\u003C/p\u003E\n\u003Cp\u003EAnother nice advantage of having your document types as classes is that it\u0027s so easy to open them up and find the exact alias of a property to use in our Razor scripts, no more going to \u0022Settings\u0022 \u0026gt; expanding \u0022Document types\u0022 \u0026gt; going to the \u0022Generic properties\u0022 tab and finding the alias.\u003C/p\u003E\n\u003Cp\u003EFinally, as an added bonus, using Razor is really what makes it able for me to work with uSiteBuilder without problems, as you can create Razor macro\u0027s without.. creating a macro.\u003C/p\u003E\n\u003Cp\u003EThat\u0027s right, it\u0027s as easy as referring to a file. In your template, just insert a macro like this:\u003C/p\u003E\n\u003Cpre class=\u0022brush: xml\u0022\u003E\u0026lt;umbraco:Macro FileLocation=\u0022~/macroScripts/MainMenu.cshtml\u0022 runat=\u0022server\u0022 /\u0026gt;\n\u003C/pre\u003E\n\u003Cp\u003ESo, now when you deploy your site, all you need to do is move around the changed files. Don\u0027t forget the \u0022SomeCompany.Extensions.dll\u0022, together with \u0022Vega.USiteBuilder.dll\u0022 it will start creating and modifying your docTypes and templates.\u0026nbsp;\u003C/p\u003E\n\u003Cp\u003EThanks to the great folks at \u003Ca href=\u0022http://www.vegaitsourcing.rs/\u0022\u003EVega IT Sourcing\u003C/a\u003E for a truely awesome tool that makes my life much easier, I love it!\u003C/p\u003E",
  "blocks": {
    "contentData": [],
    "settingsData": [],
    "expose": [],
    "Layout": {}
  }
}]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/2d59f0b5f9fc484eb4ca79b4fc271ec1]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>