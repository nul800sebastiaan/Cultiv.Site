<?xml version="1.0" encoding="utf-8"?>
<Content Key="b11b61ec-ec16-4644-b0ab-15d212e2f1fa" Alias="Setting up Hangfire in Umbraco 9" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/SettingUpHangfireInUmbraco9</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2021-09-18T14:52:26</CreateDate>
    <NodeName Default="Setting up Hangfire in Umbraco 9" />
    <SortOrder>51</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[{
  "markup": "\u003Cp\u003EI\u0027m a big fan of Hangfire to manage my scheduled tasks. I\u0027ve previously written on how to get \u003Ca href=\u0022/{localLink:bc1a255a-b52b-4802-8391-2a46d32f92f2}\u0022 type=\u0022document\u0022 title=\u0022Using Hangfire for scheduled tasks in Umbraco\u0022\u003EHangfire up and running in Umbraco 8\u003C/a\u003E and the good news is that it\u0027s even easier in Umbraco 9!\u003C/p\u003E\n\u003Cp\u003EAs a summary, we need to do 5 things:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EInstall Hangfire\u003C/li\u003E\n\u003Cli\u003EConfigure the Hangfire server and dashboad\u003C/li\u003E\n\u003Cli\u003ESecure the dashboard so that it\u0027s not publicly available\u003C/li\u003E\n\u003Cli\u003EGet the dashboard in Umbraco\u003C/li\u003E\n\u003Cli\u003ESchedule a job\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch2\u003EInstalling\u003C/h2\u003E\n\u003Cp\u003EThis step hasn\u0027t changed at all, from your Visual Studio/Rider/CLI you add the NuGet packages to your project, to follow this blog post you\u0027ll require: Hanfire.Core, Hangfire.AspNetCore and Hangfire.SqlServer. At the time of this writing these were all at version 1.7.25. For the authorization to work you need to be at least at version 1.7.8.\u003C/p\u003E\n\u003Ch2\u003EConfiguring\u003C/h2\u003E\n\u003Cp\u003EWhen you start playing with Umbraco 9 you will learn that the Startup.cs class is where all the magic happens. This is the starting point for all .NET Core apps and most tutorials and documentation will encourage you to alter that file. This is fine, but the downside is that if you ever want to redistribute some of your code as a package, you need to tell people to manually update the Startup.cs file after installing your package. Instead, wouldn\u0027t it be nice if everything was just automatically configured after installing a new package?\u003C/p\u003E\n\u003Cp\u003EGood news: that\u0027s where Umbraco\u0027s Composers come in handy. We can separate all the setup code we need for Hangfire into a composer that will run at startup.\u00A0\u003C/p\u003E\n\u003Cp\u003EThis bit of code is a little large to put in a blog post so I\u0027ll ad some screenshots of the different parts and I\u0027ll link to the source code for copy/paste purposes.\u003C/p\u003E\n\u003Cp\u003EIn the first part we need to tell Hangfire what database to use, in this example the same database as where Umbraco is installed is being used, so we\u0027re getting the connection string with the name \u0022umbracoDbDSN\u0022.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022?rmode=max\u0026amp;width=500\u0022 alt=\u0022\u0022 width=\u0022500\u0022 height=\u0022228.6931818181818\u0022 data-udi=\u0022umb://media/93c92a0690384872a2f0f4b4733e7a5a\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EWe\u0027re also telling the .net core app to add the Hangfire server, this will enable you to run jobs, otherwise it would only just queue them until a server becomes available.\u003C/p\u003E\n\u003Ch2\u003ESecuring\u003C/h2\u003E\n\u003Cp\u003EIn the next part the Hangfire dashboard is being added and authorized.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022?rmode=max\u0026amp;width=500\u0022 alt=\u0022\u0022 width=\u0022500\u0022 height=\u0022249.00662251655632\u0022 data-udi=\u0022umb://media/b702b1145ed544af9a4fb779126b77c4\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EFirst we add a policy, named \u0022HangfireDashboard\u0022 (it\u0027s in a constant, but trust me about the name \uD83D\uDE09).\u003C/p\u003E\n\u003Cp\u003EThis will require people who visit the dashboard to be authenticated in the Umbraco backoffice and to have access to the Settings section of Umbraco. Luckily, Hangfire supports .net core authorization out of the box so all we need to do is to ask for RequireAuthorization with a name of a policy.\u003C/p\u003E\n\u003Cp\u003EDo note that the endpoint URL here starts with /umbraco. I believe this is required if you require the user to be logged into the backoffice. Trying to do the same with just the default route (/hangfire) didn\u0027t seem to work.\u003C/p\u003E\n\u003Ch2\u003EDashboard in Umbraco\u003C/h2\u003E\n\u003Cp\u003ETo get the dashboard to show up in Umbraco, we can make a little App_Plugin that contains a dashboard, the dashboard shows an iframe with the URL we configured above /umbraco/backoffice/hangfire. We should see something like this in our backoffice now:\u003C/p\u003E\n\u003Cp\u003E\u00A0\u003Cimg src=\u0022?rmode=max\u0026amp;width=500\u0022 alt=\u0022\u0022 width=\u0022500\u0022 height=\u0022321.89014539579966\u0022 data-udi=\u0022umb://media/6e33bbc0cc234180a72252d49cc107a3\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis covered in more detail in \u003Ca href=\u0022/{localLink:bc1a255a-b52b-4802-8391-2a46d32f92f2}\u0022 type=\u0022document\u0022 title=\u0022Using Hangfire for scheduled tasks in Umbraco\u0022\u003Ethe v8 blog post\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2\u003ERun jobs\u003C/h2\u003E\n\u003Cp\u003EFinally, it\u0027s time to add some jobs to the list that can be ran! There was one last \u0022gotcha\u0022 there that I\u0027ve not seen before, I was getting an error that JobStorage.Current wasn\u0027t initialized yet. Maybe it\u0027s because I\u0027m trying to add my jobs too early in the pipeline or maybe I\u0027m doing something else wrong, not sure. Luckily it was easily solved by giving it a connection string, everything started working after that:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022?rmode=max\u0026amp;width=500\u0022 alt=\u0022\u0022 width=\u0022500\u0022 height=\u002297.10391822827938\u0022 data-udi=\u0022umb://media/d5aed1c9c0304203af769f00e8b5df35\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThen I wrote a silly little job to test it all out.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022?rmode=max\u0026amp;width=500\u0022 alt=\u0022\u0022 width=\u0022500\u0022 height=\u0022315.6645569620253\u0022 data-udi=\u0022umb://media/8892eb4619854084a0e3520fc6561484\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EWhich resulted in a beautiful overview with a progress bar that updated every second.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022?rmode=max\u0026amp;width=500\u0022 alt=\u0022\u0022 width=\u0022500\u0022 height=\u0022243.90243902439025\u0022 data-udi=\u0022umb://media/02f45f23b4fb46fe8a673eb811ded5bb\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EAnd there you have it, Hangfire fully working and fully protected in Umbraco 9. Happy queuing everyone!\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EUpdate:\u003C/strong\u003E This is now available as a package as well: \u003Ca rel=\u0022noopener\u0022 href=\u0022https://our.umbraco.com/packages/developer-tools/cultivhangfire/\u0022 target=\u0022_blank\u0022\u003Ehttps://our.umbraco.com/packages/developer-tools/cultivhangfire/\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EThe source code is available on GitHub: \u003Ca rel=\u0022noopener\u0022 href=\u0022https://github.com/nul800sebastiaan/Cultiv.Hangfire\u0022 target=\u0022_blank\u0022\u003Ehttps://github.com/nul800sebastiaan/Cultiv.Hangfire\u003C/a\u003E\u003C/p\u003E\n\u003Ch2\u003EPackaging it up\u003C/h2\u003E\n\u003Cp\u003EThis was also my first time producing a package for v9, which was made easier with the \u003Ca href=\u0022https://our.umbraco.com/documentation/UmbracoNetCoreUpdates#package-development\u0022 data-anchor=\u0022#package-development\u0022\u003Edotnet new umbracopackage\u003C/a\u003E command, after which I added a few bits to \u003Ca rel=\u0022noopener\u0022 href=\u0022https://github.com/nul800sebastiaan/Cultiv.Hangfire/blob/main/Cultiv.Hangfire/Cultiv.Hangfire.csproj\u0022 target=\u0022_blank\u0022\u003Emy csproj file\u003C/a\u003E, these were:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ethe title\u003C/li\u003E\n\u003Cli\u003Edescription\u003C/li\u003E\n\u003Cli\u003Eauthors\u003C/li\u003E\n\u003Cli\u003Eproject URL\u003C/li\u003E\n\u003Cli\u003Elicense file\u003C/li\u003E\n\u003Cli\u003Eicon\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EWhen I was trying to install this on a Cloud site, I realized my package dependencies for Umbraco wouldn\u0027t work. They were set to 9.0.0-rc003 but the current versions on Cloud are all nightly releases, named something like 9.0.0-preview1234.\u003C/p\u003E\n\u003Cp\u003ESince P comes before R in the alphabet, NuGet refused to install the package. This was fixed by lowering the dependency in the csproj file to 9.0.0-preview001.\u003C/p\u003E\n\u003Cp\u003ETo wrap it up, I wanted to try out GitHub Actions to build and deploy the package automatically. A \u003Ca href=\u0022https://acraven.medium.com/a-nuget-package-workflow-using-github-actions-7da8c6557863\u0022\u003Eblog post by Andrew Craven\u003C/a\u003E came in handy there and with a few little changes I was able to add build scripts and release deploy scripts.\u003C/p\u003E\n\u003Cp\u003ESo now when I add a tag to a commit in my GitHub repository, a build will run and when successful, package everything up and push it as a new release to NuGet. You can \u003Ca href=\u0022https://github.com/nul800sebastiaan/Cultiv.Hangfire/tree/main/.github/workflows\u0022\u003Echeck out the automation files I ended up creating on GitHub\u003C/a\u003E if you need some inspiration.\u003C/p\u003E",
  "blocks": {
    "contentData": [],
    "settingsData": [],
    "expose": [],
    "Layout": {}
  }
}]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/96b525eb5d8f4ba1bb1a11bf58f9c0aa]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[0]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>