<?xml version="1.0" encoding="utf-8"?>
<Content Key="aa926dd0-d71a-48f1-813a-362637c6f9aa" Alias="Moving from DateFolders to Umbraco's new ListView" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/MovingFromDateFoldersToUmbracosNewListView</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2014-01-19T13:57:26</CreateDate>
    <NodeName Default="Moving from DateFolders to Umbraco's new ListView" />
    <SortOrder>36</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>This site <span class="strikethrough">is currently still running on Umbraco 6.1.6 but I'm moving it over to Umbraco 7</span>, has moved from Umbraco 6.16 to v7 and I <span class="strikethrough">don't</span> didn't want to have my blog posts listed in date folders any more.</p>
<p>DateFolders were a bit of a hack to make sure that the tree in Umbraco could load quickly. Too many children under one single node would cause the expansion of the tree to slow down. Not only that, it's hard to find items if there's a long list under just one child.</p>
<p>The ListView in Umbraco 7 solves all that, it's a nice sortable, searchable and paged list of child items under the current node. In this screenshot, for example, there's three children under the currently selected node and they're shown in a list on the right side instead of in the tree on the left:</p>
<p><img src="umb://media/b1e1c09d60e8404b98b9050611b665a0" alt="Container _content _type _640x 332" width="499" height="259" data-udi="umb://media/b1e1c09d60e8404b98b9050611b665a0"></p>
<p>So there were two challanges: moving all items and making sure the old URLs wouldn't start failing. </p>
<p>Redirecting the old URLs was actually the difficult part (since I suck at regex..). I used IIS' <a href="http://www.iis.net/downloads/microsoft/url-rewrite">URL Rewrite 2.0 extension</a> for this. This extension is not installed by default on all webservers, but in <em>Umbraco as a Service</em> (which is where this site lives) it is installed, nice!</p>
<p>So now to figure out the pattern: </p>
<ul>
<li>each blog post url starts with blog/</li>
<li>then a 4 digit year</li>
<li>then a 1 or 2 digit month</li>
<li>then a 1 or 2 digit day</li>
<li>then the blog title</li>
</ul>
<p>This leads to one group that includes the date and one group that contains the rest of the URL (groups are made by surrounding some arguments in parenthesis):</p>
<pre class="brush: c-sharp">(blog/\d{4}/\d{1,2}/\d{1,2}\/)(.*)</pre>
<p><br> So once I got that one working, I added it to the web.config, in the rewrite/rules section. So: anything that starts with this regex pattern, do a permanent redirect to /blog/{whatever-was-here-as-"the rest"-of-the-url} (R:2 refers to the second regex group, which is "(.*)" ):</p>
<pre class="brush: xml">&lt;rule name="Blog" stopProcessing="true"&gt;
	&lt;match url="^(blog/\d{4}/\d{1,2}/\d{1,2}\/)(.*)$" /&gt;
	&lt;action type="Redirect" url="/blog/{R:2}" /&gt;
&lt;/rule&gt;</pre>
<p>Of course now all my URLs are failing because there's no actual content there, well let's fix that with a super simple <a href="http://our.umbraco.org/documentation/Reference/WebApi/">UmbracoApiController</a>. </p>
<p>Each of my blog posts has a content type with the alias of "BlogPost", these all need to be moved under the /blog node which has an Id of 1207. I can go through the descendants of anything under /blog and check the content type to see if it matches. <br>I also want to make sure that they're sorted from oldest to newest as that's the default sorting of Umbraco. With that done, I just move all posts directly under /blog. The new API in v6 make this so incredibly easy, awesome:</p>
<pre class="brush: c-sharp">using System.Linq;
using Umbraco.Core.Models;
using Umbraco.Web.WebApi;

namespace Temporary.Controllers
{
    public class BlogPostsController : UmbracoApiController
    {
        public void PostMovePosts()
        {
            const int blogNodeId = 1207;

            var contentService = Services.ContentService;
            var blogNode = contentService.GetById(blogNodeId);

            foreach (var post in blogNode.Descendants().OrderBy(p =&gt; p.CreateDate))
            {
                if (post.ContentType.Alias == "BlogPost")
                {
                    contentService.Move(post, blogNodeId);
                }
            }
        }
    }
}
</pre>
<p>So: inherit from <em>UmbracoApiController</em>, that will create a route for us to go to: /umbraco/api/{ControllerName}/{MethodName} - So in this case: /umbraco/api/BlogPosts/PostMovePosts</p>
<p>By convention the BlogPostsController needs it's suffix "Controller" stripped off, so that turns in to "BlogPosts" and the method "PostMovePosts" starts with the verb "Post" which translates to the HTTP verb POST. That means I'll be using <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en">PostMan</a> with that verb:</p>
<p><img src="umb://media/b1127c80ac5f4a63a6bf8800d43e64c5" alt="2014-01-19_144340" width="499" height="270" data-udi="umb://media/b1127c80ac5f4a63a6bf8800d43e64c5"></p>
<p>And there we have it, everything nicely moved and sorted, ready for the v7 upgrade.</p>
<p><img src="/media/18443b577d7d478dadc69e66f63873d5/00000006000000000000000000000000/2014-01-19_144517.png" alt="2014-01-19_144517" width="440" height="223" data-udi="umb://media/18443b577d7d478dadc69e66f63873d5"></p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/4288c5d8fdad469da8c1ae2ac6868f9b]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>