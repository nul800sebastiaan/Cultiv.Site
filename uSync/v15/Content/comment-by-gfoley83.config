<?xml version="1.0" encoding="utf-8"?>
<Content Key="700cba50-ba58-459d-b913-cf7e68eac804" Alias="Comment by GFoley83" Level="4">
  <Info>
    <Parent Key="114ff52c-1698-49a8-9ec2-b28ec2f0d112">Razor vs. "/base" to output Json in Umbraco</Parent>
    <Path>/Site/Blog/RazorVsBaseToOutputJsonInUmbraco/CommentByGFoley83</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPostComment</ContentType>
    <CreateDate>2012-12-10T05:39:29</CreateDate>
    <NodeName Default="Comment by GFoley83" />
    <SortOrder>28</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template />
  </Info>
  <Properties>
    <comment>
      <Value><![CDATA[I find that serializing "node.Properties" directly to json isn't very helpful because to retrieve the values, you either have to search the json array for the property you want or know the index of your property beforehand<br />E.g<br /><br />[0].Value, [1].Value etc<br /><br />I use the following instead:<br /><br />@using umbraco.NodeFactory<br />@inherits Umbraco.Web.Mvc.UmbracoTemplatePage<br />@{<br />var node = new umbraco.NodeFactory.Node(Model.Content.Id);<br />var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();<br /><br />var propDic = new Dictionary<string, Property>();<br /><br />foreach (Property prop in node.Properties)<br />{<br />propDic.Add(prop.Alias, prop);<br />}<br />}<br /><br />@Html.Raw(serializer.Serialize(propDic))<br /><br /><br />This was I can query my json object a little easier,<br />E.g.<br /><br />myPropertyAlias.Value]]></Value>
    </comment>
    <commenterEmail>
      <Value><![CDATA[gavinfoley@gmail.com]]></Value>
    </commenterEmail>
    <commenterName>
      <Value><![CDATA[GFoley83]]></Value>
    </commenterName>
  </Properties>
</Content>