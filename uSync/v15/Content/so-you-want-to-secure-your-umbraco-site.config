<?xml version="1.0" encoding="utf-8"?>
<Content Key="ce9858a0-7b07-4fe5-bfdc-cded00fbb212" Alias="So you want to secure your Umbraco site" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/SoYouWantToSecureYourUmbracoSite</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2016-03-25T11:31:32</CreateDate>
    <NodeName Default="So you want to secure your Umbraco site" />
    <SortOrder>42</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[{
  "markup": "\u003Cp\u003EImagine, if you will, for a second, that you\u0027re trying to secure your Umbraco site by running it over an https connection, sounds complicated? Not so much. It\u0027s fairly trivial to set up once you have a certificate, which \u003Ca data-id=\u00221650\u0022 href=\u0022/{localLink:30f2acbe-5336-477b-bd56-81bd54da1b05}\u0022 type=\u0022document\u0022 title=\u0022Let\u0027s Encrypt, on Windows\u0022 data-udi=\u0022umb://document/30f2acbe5336477bbd5681bd54da1b05\u0022\u003Eyou now know how to create using Let\u0027s Encrypt\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EI\u0027m not going to explain how to create a binding in IIS, this process is different per hosting provider and it\u0027s impossible to cover this for everyone. We\u0027ve made it easy on \u003Ca href=\u0022http://umbraco.com/cloud\u0022\u003EUmbraco as a Service\u003C/a\u003E (UaaS): upload a .pfx file, bind it to one of your host names. We can (and will) make it even easier.\u003C/p\u003E\n\u003Cp\u003EAlright, we\u0027re there, our site, when typing \u0022https://\u0022 as the prefix works and gives us a satisfying green lock to show that the connection was encrypted end to end and Chrome tells us our site is secure, yay!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 427.1186440677966px; height: 500px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221699\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/ec0c69be8b1040efa6e55e3ae785e939\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EThere\u0027s only one more thing that you need to do for Umbraco to make sure that the backoffice is secure: go into your web.config and find the appSetting called \u0022umbracoUseSSL\u0022. This setting is \u0022false\u0022 by default and needs to be changed to \u0022true\u0022. A quick look in the source code of Umbraco teaches us that the only use for this setting is to make sure that the cookies issued when logging into the backoffice get the \u0022secure\u0022 flag, meaning it will only send the cookie when the connection is encrypted (so only over https).\u003C/p\u003E\n\u003Cp\u003EThis is all it does, and that\u0027s all there is to it, you\u0027ve secured your Umbraco site!\u003C/p\u003E\n\u003Ch2\u003ETaking it further\u003C/h2\u003E\n\u003Cp\u003EWe\u0027re running successfully on https, but we might not be at the peak of our game yet, let\u0027s run some online scans to see what else we can do to make our site more secure.\u003C/p\u003E\n\u003Ch3\u003ESSLLabs\u003C/h3\u003E\n\u003Cp\u003EOkay, that was the good news. Full of hope you run over to \u003Ca href=\u0022https://www.ssllabs.com/ssltest/analyze.html\u0022\u003ESSLLabs to test your site\u0027s security\u003C/a\u003E. Depending on your hosting server\u0027s setup you might and come up with a.. disappointing grade. Luckily, my site lives on Umbraco as a Service, so I get a mighty fine \u0022A\u0022 grade.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://www.ssllabs.com/ssltest/analyze.html?d=cork.nl\u0022\u003E\u003Cimg style=\u0022width: 500px; height: 240.1639344262295px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221624\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/731eb7eff86241b7a80968a75fcff867\u0022\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003EHoever, you might end up with a different grade if the server your hosting on has enabled insecure protocols and encryption ciphers. If you\u0027re self-hosting then I recommend you \u003Ca href=\u0022https://www.nartac.com/Products/IISCrypto\u0022\u003Erun Nartac IIS Crypto\u003C/a\u003E and apply the fixes suggested using the \u0022Best Practices\u0022 button. It\u0027s a dead-simple, one-click fix for most (if not all) of your bad grades on SSLLabs.\u003C/p\u003E\n\u003Ch3\u003EHTTPS by default\u003C/h3\u003E\n\u003Cp\u003EFor the following modifications, I\u0027m going to assume that \u003Ca href=\u0022http://www.iis.net/downloads/microsoft/url-rewrite\u0022\u003Ethe URL Rewrite module for IIS\u003C/a\u003E is installed on your webhosting server (exactly why Microsoft doesn\u0027t ship with this installed by default is beyond me!).\u003C/p\u003E\n\u003Cp\u003ENow that we can access the site over HTTPS, let\u0027s redirect all traffic to the site to HTTPS, that way you always have that happy green lock in your browser and you will always encrypt all traffic against people trying to snoop on you whether they are a \u003Ca href=\u0022https://en.wikipedia.org/wiki/Man-in-the-middle_attack\u0022\u003EMan In The Middle\u003C/a\u003E, your internet\u00A0provider or the NSA. This can be done using a URL Rewrite rule. In the following rule \u0022localhost\u0022 is excluded from rewriting so that I don\u0027t have to jump through hoops to set up valid certificates and hostnames when debugging my site on\u00A0my local machine.\u003C/p\u003E\n\u003Cp\u003EThis configuration goes into the system.webServer/rewrite/rules section of the web.config:\u003C/p\u003E\n\u003Cpre\u003E \u0026lt;rule name=\u0022HTTP to HTTPS redirect\u0022 stopProcessing=\u0022true\u0022\u0026gt;\u003Cbr\u003E  \u0026lt;match url=\u0022(.*)\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;conditions\u0026gt;\u003Cbr\u003E   \u0026lt;add input=\u0022{HTTPS}\u0022 pattern=\u0022off\u0022 ignoreCase=\u0022true\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add input=\u0022{HTTP_HOST}\u0022 pattern=\u0022localhost\u0022 negate=\u0022true\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;/conditions\u0026gt;\u003Cbr\u003E  \u0026lt;action type=\u0022Redirect\u0022 url=\u0022https://{HTTP_HOST}/{R:1}\u0022 redirectType=\u0022Permanent\u0022 /\u0026gt;\u003Cbr\u003E \u0026lt;/rule\u0026gt;\u003C/pre\u003E\n\u003Cp\u003EWhile we\u0027re adding redirects, it\u0027s good for search engines to have just one domain to look at, so I can set up a redirect that strips \u0022www\u0022 from any requests (which will then feed into the rule above and makes sure to redirect to HTTPS):\u003C/p\u003E\n\u003Cpre\u003E \u0026lt;rule name=\u0022Strip www. from URL\u0022 stopProcessing=\u0022true\u0022\u0026gt;\u003Cbr\u003E  \u0026lt;match url=\u0022^(.*)$\u0022 ignoreCase=\u0022true\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;conditions logicalGrouping=\u0022MatchAll\u0022\u0026gt;\u003Cbr\u003E   \u0026lt;add input=\u0022{HTTP_HOST}\u0022 pattern=\u0022^www\\.(.\u002B)$\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;/conditions\u0026gt;\u003Cbr\u003E  \u0026lt;action type=\u0022Redirect\u0022 url=\u0022http://{C:1}/{R:1}\u0022 redirectType=\u0022Permanent\u0022 /\u0026gt;\u003Cbr\u003E \u0026lt;/rule\u0026gt;\u003C/pre\u003E\n\u003Cp\u003ETo further minimize any attacks where bad guys might want to trick you into using insecure HTTP request, you can send up a header with each request called \u003Ca href=\u0022https://scotthelme.co.uk/hsts-the-missing-link-in-tls/\u0022\u003Ethe HTTP Strict Transport Security (HSTS) header\u003C/a\u003E. Enabling HSTS will tell the browser: for the specified amount of time you will not look up any pages on this domain over HTTP any more, always use HTTPS. This is an addition that can be made to the system.webServer/rewrite/outboundRules section:\u003C/p\u003E\n\u003Cpre\u003E \u0026lt;outboundRules\u0026gt;\u003Cbr\u003E  \u0026lt;rule name=\u0022Add Strict-Transport-Security when HTTPS\u0022 enabled=\u0022true\u0022\u0026gt;\u003Cbr\u003E  \u0026lt;match serverVariable=\u0022RESPONSE_Strict_Transport_Security\u0022 pattern=\u0022.*\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;conditions\u0026gt;\u003Cbr\u003E   \u0026lt;add input=\u0022{HTTPS}\u0022 pattern=\u0022on\u0022 ignoreCase=\u0022true\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add input=\u0022{HTTP_HOST}\u0022 pattern=\u0022localhost\u0022 negate=\u0022true\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;/conditions\u0026gt;\u003Cbr\u003E  \u0026lt;action type=\u0022Rewrite\u0022 value=\u0022\u003Cspan\u003Emax-age=63072000; includeSubDomains; preload\u003C/span\u003E\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;/rule\u0026gt;\u003Cbr\u003E \u0026lt;/outboundRules\u0026gt;\u003C/pre\u003E\n\u003Cp\u003EThis adds the \u0022Strict-Transport-Security\u0022 header that tells browsers: for the next 63072000\u00A0seconds (which is two years) the browser should not make any HTTP requests to this domain.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote:\u003C/strong\u003E the rules for HSTS inclusion might change from time to time. Make sure to \u003Ca href=\u0022https://hstspreload.appspot.com/\u0022\u003Eread the current requirements\u003C/a\u003E before you follow these steps.\u003C/p\u003E\n\u003Cp\u003EHowever... there\u0027s still a tiny sliver of an attack vector here. If you are a \u003Cem\u003EMan in the Middle\u003C/em\u003E and manage to lure someone to a site that they\u0027ve never visited before, their very first request will still be the only one ever to go over HTTP. In that single request the Man in the Middle could still possibly do bad things. The only way to eliminate this risk is to never allow HTTP connections to the site, but then everybody needs to know that you can only ever get to the site by prefixing it with \u0022https://\u0022. Not very user friendly.\u003C/p\u003E\n\u003Cp\u003EYou can, however, ask to be put on a list that is baked into browsers like Chrome, Firefox, Safari, IE11 and Edge. This is called \u003Ca href=\u0022https://scotthelme.co.uk/hsts-preloading/\u0022\u003EHSTS Preloading\u003C/a\u003E and takes a few weeks to get set up (it\u0027s a manual process). When you do finally make it on this preloaded list, your browser will never request any pages over HTTP but choose HTTPS by default. Part of the manual check that Google will do is to see if HSTS is set up including subdomains and if the preload parameter is there, this is why they\u0027re added to the rewrite rule above.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 414.42048517520215px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221659\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/a528933f0b814c55915190cd2218d354\u0022\u003E\u003C/p\u003E\n\u003Ch3\u003EASafaWeb\u003C/h3\u003E\n\u003Cp\u003EThe \u0022Automated Security Analyser for ASP.NET Websites\u0022 will test your Umbraco site for known issues with ASP.NET websites. I\u0027m not doing so well\u00A0on this one and have a few things to fix.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 335.30106257378986px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221696\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/e38b866762934f60a1733db6dc9f2aec\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EAsafaWeb gives me excellent guidance to fix things like Custom Errors and an exposed Stack Trace, just update the web.config to set Custom Errors to \u0022RemoteOnly\u0022 and we\u0027re good.\u003C/p\u003E\n\u003Cp\u003EAs for the orange warnings:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EExcessive headers: The header \u0022Server: Microsoft-IIS/8.5\u0022 gets sent with each response. I have tried disabling this but apparently our UaaS servers forcefully add this header. Nothing I could do about it, this needs to be removed at a server level. There\u0027s many other ways to probe sites and find out (by looking at their behavior) that it\u0027s running IIS and even which version it runs. So attackers specifically out to target my site are only a few seconds extra delayed in picking the correct attack vectors, I\u0027m not worried about this header.\u003C/li\u003E\n\u003Cli\u003EHTTP only cookies: The \u0022ARRAffinity\u0022 cookie is only there for IIS to quickly determine on which of the available web servers my website lives. It\u0027s not an attack vector: if it\u0027s wrong or doesn\u0027t exist, this cookie will just be overwritten with a new one.\u003C/li\u003E\n\u003Cli\u003EClickjacking: A valid concern, I can deny people framing my site with the simple addition of \u0022X-Frame-Options\u0022 to the web.config (more on this later!). \u003Cbr\u003E\u003Cstrong\u003ENote:\u003C/strong\u003E Always make sure you remove a custom header first, if the webserver already has it\u0027s own \u0022add\u0022 rule, then you can\u0027t overwrite it by inserting your own, you need to remove the existing one first. Also note that Umbraco has tried to be helpful and removed the header that tells the world what MVC version you\u0027re running by removing \u0022X-Powered-By\u0022 in the systemWebserver/httpProtocol/customHeaders section of your web.config.\u003Cbr\u003E\n\u003Cpre\u003E \u0026lt;httpProtocol\u0026gt;\u003Cbr\u003E  \u0026lt;customHeaders\u0026gt;\u003Cbr\u003E   \u0026lt;!-- Ensure the powered by header is not returned --\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Powered-By\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Frame-Options\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add name=\u0022X-Frame-Options\u0022 value=\u0022DENY\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;/customHeaders\u0026gt;\u003Cbr\u003E \u0026lt;/httpProtocol\u0026gt;\u003C/pre\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThere\u0027s a few gray boxes there: because my site doesn\u0027t have a view state in the HTML, AsafaWeb assumes (correctly) that I\u0027m not using WebForms, so those tests didn\u0027t need to run any further. I couldn\u0027t\u00A0figure out how to trigger the \u0022Hash dos patch\u0022 test, even after adding a form that does a POST (as described on AsafaWeb) it doesn\u0027t test for this problem. Luckily I know that UaaS runs on servers not affected by the \u003Ca href=\u0022http://technet.microsoft.com/en-us/security/bulletin/ms11-100\u0022 target=\u0022_blank\u0022\u003EMS11-100\u003C/a\u003E security vulnerability, but you might want to check with your hosting provider.\u003C/p\u003E\n\u003Cp\u003ELooks better now:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 107.18870346598203px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221663\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/a60932f6a48e47aa8fb77854aad08c75\u0022\u003E\u003C/p\u003E\n\u003Ch3\u003ESecurity-headers.io\u003C/h3\u003E\n\u003Cp\u003EGoing even further down into securing our website, there\u0027s some \u0022fun\u0022 things we can do to make most websites misbehave, \u003Ca href=\u0022http://www.troyhunt.com/2015/09/introducing-you-to-browser-security.html\u0022\u003Elike making it do the Harlem Shake\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://securityheaders.io\u0022\u003ESecurity-headers.io\u003C/a\u003E looks to see if you\u0027ve implemented policies to mitigate these kinds of problems which are mostly XSS (cross site scripting) based. Look at this result.. ouch:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 452.8301886792453px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221597\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/48cb56e7f06349f1bef481134d61d923\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EWe can easily makes this a lot better by following some of the advise here on adding a \u0022X-Xss-Protection\u0022 and a \u0022X-Content-Type-Options\u0022 header:\u003C/p\u003E\n\u003Cpre\u003E \u0026lt;httpProtocol\u0026gt;\u003Cbr\u003E  \u0026lt;customHeaders\u0026gt;\u003Cbr\u003E   \u0026lt;!-- Ensure the powered by header is not returned --\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Powered-By\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Frame-Options\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add name=\u0022X-Frame-Options\u0022 value=\u0022DENY\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Xss-Protection\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add name=\u0022X-Xss-Protection\u0022 value=\u00221; mode=block\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Content-Type-Options\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add name=\u0022X-Content-Type-Options\u0022 value=\u0022nosniff\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;/customHeaders\u0026gt;\u003Cbr\u003E \u0026lt;/httpProtocol\u0026gt;\u003C/pre\u003E\n\u003Cp\u003EBetter:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 213.2486388384755px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221570\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/2497cc15a950488998bdbe96f1466597\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://scotthelme.co.uk/content-security-policy-an-introduction/\u0022\u003EContent Security Policy (CSP)\u003C/a\u003E is a lot harder to implement because it requires you to look at all of your site\u0027s assets and whitelist them. This is difficult especially if you load video\u0027s from YouTube, use CDN hosted javascript libraries, links to external images etc. Which brings us to the following check to run.\u003C/p\u003E\n\u003Ch3\u003ECSP Analyser\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://report-uri.io/home/analyse\u0022\u003ECSP analyser over at report-uri.io\u003C/a\u003E looks at any policies you\u0027ve implemented and tells you how good they are. It\u0027s impossible to give a good policy for all websites, so I\u0027ll just post the one I\u0027ve struggled with and finally landed on for\u00A0this site:\u003C/p\u003E\n\u003Cpre\u003E \u0026lt;httpProtocol\u0026gt;\u003Cbr\u003E  \u0026lt;customHeaders\u0026gt;\u003Cbr\u003E   \u0026lt;!-- Ensure the powered by header is not returned --\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Powered-By\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Frame-Options\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add name=\u0022X-Frame-Options\u0022 value=\u0022DENY\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Xss-Protection\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add name=\u0022X-Xss-Protection\u0022 value=\u00221; mode=block\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022X-Content-Type-Options\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add name=\u0022X-Content-Type-Options\u0022 value=\u0022nosniff\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;remove name=\u0022Content-Security-Policy\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;add name=\u0022Content-Security-Policy\u0022 value=\u0022default-src \u0027self\u0027 https://www.gravatar.com;script-src \u0027self\u0027 https://www.google-analytics.com https://ssl.google-analytics.com;style-src \u0027self\u0027 \u0027sha256-MZKTI0Eg1N13tshpFaVW65co/LeICXq4hyVx6GWVlK0=\u0027 \u0027sha256-CwE3Bg0VYQOIdNAkbB/Btdkhul49qZuwgNCMPgNY5zw=\u0027 \u0027sha256-LpfmXS\u002B4ZtL2uPRZgkoR29Ghbxcfime/CsD/4w5VujE=\u0027 \u0027sha256-YJO/M9OgDKEBRKGqp4Zd07dzlagbB\u002BqmKgThG52u/Mk=\u0027 https://fonts.googleapis.com;img-src \u0027self\u0027 data: https://www.gravatar.com https://www.google-analytics.com;font-src \u0027self\u0027 https://fonts.gstatic.com https://fonts.googleapis.com;\u0022 /\u0026gt;\u003Cbr\u003E  \u0026lt;/customHeaders\u0026gt;\u003Cbr\u003E \u0026lt;/httpProtocol\u0026gt;\u003C/pre\u003E\n\u003Cp\u003EI am using Gravatar images, Google Analytics and the Google Fonts API. The sha256 references are there to fix \u003Ca href=\u0022https://github.com/Modernizr/Modernizr/pull/1263\u0022\u003Esome things that Modernizr.js wants to execute\u003C/a\u003E, which wouldn\u0027t otherwise be allowed, Chrome dev tools will tell you exactly what to add if this is a problem for you:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 302.937576499388px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221671\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/b468cf2372d04b5ebb9a582a5e402bcd\u0022\u003E\u003C/p\u003E\n\u003Cp\u003ETo make it a bit easier for you to manage, \u003Ca href=\u0022https://report-uri.io/register/\u0022\u003Ereport-uri.io allows you to set up a free\u003C/a\u003E\u003Ca href=\u0022https://report-uri.io/register/\u0022\u003E\u00A0account\u003C/a\u003E. Using that,\u00A0all CSP violations will be logged for you so you can have a look at updating your whitelist accordingly.\u003C/p\u003E\n\u003Cp\u003EAfter setting up a CSP, securityheaders.io now reports a respectable \u0022A\u0022 grade.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 159.5744680851064px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221645\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/90649c2d046945c298205077ea297392\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EI\u0027ve looked into \u003Ca href=\u0022https://scotthelme.co.uk/hpkp-http-public-key-pinning/\u0022\u003EPublic Key Pinning (HPKP)\u003C/a\u003E but the process seems too onerous for little gain for now. The problem with HPKP is currently that I don\u0027t understand how backup CSRs are supposed to work and what exactly I need to do when my current certificate expires. I have done some experiments and they worked but I need to do further testing to see what it will take to switch to a new certificate.\u003C/p\u003E\n\u003Cp\u003EIn case you are wondering (and are brave), the HPKP header can be configured like so in system.webServer/httpProtocol/customHeaders:\u003C/p\u003E\n\u003Cpre\u003E \u0026lt;remove name=\u0022Public-Key-Pins\u0022 /\u0026gt;\u003Cbr\u003E \u0026lt;add name=\u0022Public-Key-Pins\u0022 value=\u0022max-age=31536000; pin-sha256=\u0026amp;quot;h2EVK2\u002Bbga6XAxu7ImUQM0PJsgZd2/a2VtlcSmV87s4=\u0026amp;quot;; pin-sha256=\u0026amp;quot;9ilXj1leytbsCvXVIFJ1uzjmej2bzs05qzRzmfFzXKs=\u0026amp;quot;; pin-sha256=\u0026amp;quot;nupZBiNmjIMxIyEll\u002BOBYjvMORUEyYTTr7K5bE2z7L0=\u0026amp;quot;;\u0022 /\u0026gt;\u003C/pre\u003E\n\u003Cp\u003ENote that the double quotes need to be escaped because the web.config file is an XML file, so replace \u0022 with \u0026amp;quot; everywhere in the value of this header.\u003C/p\u003E\n\u003Ch2\u003EBack to Umbraco\u003C/h2\u003E\n\u003Cp\u003ENow that we\u0027ve made our frontend all nice and safe, let\u0027s go back into the backoffice of Umbraco.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 364.5287958115183px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221639\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/88983a3d7e3f4e28a81b01c0082da5e7\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EWhoops, we broke it!\u003C/p\u003E\n\u003Cp\u003EThere\u0027s a few things going on in the backoffice that we need to allow now that we\u0027ve disallowed a lot of them on the frontend. Umbraco still uses iframes for some pages in the backoffice so we\u0027ll need to allow those. The Content Security Policy is also blocking a lot of asset loading because they\u0027re set pretty strict on the frontend.\u003C/p\u003E\n\u003Cp\u003ELuckily we don\u0027t have to change\u00A0our frontend setup, we can just change the\u00A0backoffice requirements a little bit. All the way at the bottom of our web.config we already have a \u0026lt;location path=\u0022umbraco\u0022\u0026gt; section which tells IIS: for this location (the umbraco path) we want to apply different rules then for the rest of the site. We can amend this section with a custom CSP and allow frames from the same origin (so only frames with a location that lives somewhere in our site).\u003C/p\u003E\n\u003Cp\u003EWe\u0027re already disabling urlCompression for the backoffice as that can conflict with our backoffice javascripts, so let\u0027s add our updated headers there:\u003C/p\u003E\n\u003Cpre\u003E \u0026lt;location path=\u0022umbraco\u0022\u0026gt;\u003Cbr\u003E  \u0026lt;system.webServer\u0026gt;\u003Cbr\u003E   \u0026lt;urlCompression doStaticCompression=\u0022false\u0022 doDynamicCompression=\u0022false\u0022 dynamicCompressionBeforeCache=\u0022false\u0022 /\u0026gt;\u003Cbr\u003E   \u0026lt;httpProtocol\u0026gt;\u003Cbr\u003E    \u0026lt;customHeaders\u0026gt;\u003Cbr\u003E     \u0026lt;remove name=\u0022X-Frame-Options\u0022 /\u0026gt;\u003Cbr\u003E     \u0026lt;add name=\u0022X-Frame-Options\u0022 value=\u0022SAMEORIGIN\u0022 /\u0026gt;\u003Cbr\u003E     \u0026lt;remove name=\u0022Content-Security-Policy\u0022 /\u0026gt;\u003Cbr\u003E     \u0026lt;add name=\u0022Content-Security-Policy\u0022 value=\u0022default-src \u0027self\u0027 www.gravatar.com player.vimeo.com *.vimeocdn.com packages.umbraco.org our.umbraco.org;script-src \u0027self\u0027 \u0027unsafe-inline\u0027 \u0027unsafe-eval\u0027;style-src \u0027self\u0027 \u0027unsafe-inline\u0027;img-src \u0027self\u0027 data: www.gravatar.com umbraco.tv;font-src \u0027self\u0027;\u0022 /\u0026gt;\u003Cbr\u003E    \u0026lt;/customHeaders\u0026gt;\u003Cbr\u003E   \u0026lt;/httpProtocol\u0026gt; \u003Cbr\u003E  \u0026lt;/system.webServer\u0026gt;\u003Cbr\u003E \u0026lt;/location\u0026gt;\u003C/pre\u003E\n\u003Cp\u003EMuch better, our backoffice is back without errors.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 419.89987484355447px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221614\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/5b9cb540e15c478ab02275f40ad6ae0d\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EOne interesting thing I found when implementing CSP rules is that I was not allowed to have inline CSS in my site, this is a good thing, I don\u0027t want inline CSS, I want everything to be nicely tucked away in a CSS file.\u003C/p\u003E\n\u003Cp\u003EOne problem though: the rich text editor. When you insert an image in the RTE, Umbraco automatically adds an inline style for you with the dimensions of the image and there seems to be no way to prevent it from doing so.\u00A0\u003C/p\u003E\n\u003Cp\u003E\u003Cimg style=\u0022width: 500px; height: 384.7477064220183px;\u0022 src=\u0022\u0022 alt=\u0022\u0022 rel=\u00221693\u0022 data-id=\u00220\u0022 data-udi=\u0022umb://media/de27a768757e4fa7a97e8e99e722fec5\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EI\u0027ve created a simple extension method that goes through your html and strips out those inline styles. This StringExtensions.cs can be dropped into your App_Code folder:\u003C/p\u003E\n\u003Cpre\u003Eusing System.Web;\u003Cbr\u003Eusing HtmlAgilityPack;\u003Cbr\u003E\u003Cbr\u003Enamespace Cultiv.StringExtensions\u003Cbr\u003E{\u003Cbr\u003E  public static class RteStyles\u003Cbr\u003E  {\u003Cbr\u003E    public static IHtmlString RemoveInlineImageStyles(this string text) \u003Cbr\u003E    {\u003Cbr\u003E      var htmlString = new HtmlString(text);\u003Cbr\u003E      return htmlString.RemoveInlineImageStyles();\u003Cbr\u003E    }\u003Cbr\u003E \u003Cbr\u003E    public static IHtmlString RemoveInlineImageStyles(this IHtmlString htmlString)\u003Cbr\u003E    {\u003Cbr\u003E      var htmlDocument = new HtmlDocument();\u003Cbr\u003E      htmlDocument.LoadHtml(htmlString.ToString());\u003Cbr\u003E      if(htmlDocument == null || htmlDocument.DocumentNode == null || htmlDocument.DocumentNode.SelectNodes(\u0022//img[@style]\u0022) == null) \u003Cbr\u003E      {\u003Cbr\u003E        return htmlString;\u003Cbr\u003E      }\u003Cbr\u003E      else\u003Cbr\u003E      {\u003Cbr\u003E        foreach (var node in htmlDocument.DocumentNode.SelectNodes(\u0022//img[@style]\u0022))\u003Cbr\u003E        {\u003Cbr\u003E          var attribute = node.Attributes[\u0022style\u0022];\u003Cbr\u003E          node.Attributes.Remove(\u0022style\u0022);\u003Cbr\u003E        }\u003Cbr\u003E      }\u003Cbr\u003E      return new HtmlString(htmlDocument.DocumentNode.OuterHtml);\u003Cbr\u003E    }\u003Cbr\u003E  }\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EI use it\u00A0as follows in my\u00A0templates:\u003C/p\u003E\n\u003Cpre\u003E@(Model.Content.GetPropertyValue\u0026lt;string\u0026gt;(\u0022bodyText\u0022).RemoveInlineImageStyles())\u003C/pre\u003E\n\u003Ch2\u003EConclusion\u003C/h2\u003E\n\u003Cp\u003ESecurity is hard. :-)\u003C/p\u003E\n\u003Cp\u003ELuckily there\u0027s plenty of tools that help ease the pain. We are always looking into updating Umbraco where possible to take away the pain by setting up sensible defaults. We\u0027re also working on making\u00A0things easier to set up on Umbraco as a Service where we can rely more on automation.\u003C/p\u003E\n\u003Cp\u003EThere\u0027s a few security related sites I should point to that are excellent in helping you understand security and keeping you safe:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFollow \u003Ca href=\u0022http://www.troyhunt.com/\u0022\u003ETroy Hunt\u0027s blog\u003C/a\u003E and \u003Ca href=\u0022https://twitter.com/troyhunt\u0022\u003ETwitter account\u003C/a\u003E\u00A0(or whatever social media you like, there\u0027s plenty of icons on his site)\n\u003Cul\u003E\n\u003Cli\u003EIf you have a PluralSight account, \u003Ca href=\u0022http://app.pluralsight.com/author/troy-hunt\u0022\u003Ehis security courses are always great\u003C/a\u003E as well\u00A0\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003Cli\u003EFollow \u003Ca href=\u0022https://scotthelme.co.uk/\u0022\u003EScott Helme\u0027s blog\u003C/a\u003E and \u003Ca href=\u0022https://twitter.com/Scott_Helme/\u0022\u003ETwitter account\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003EI enjoy \u003Ca href=\u0022https://twit.tv/shows/security-now\u0022\u003Ethe Security Now podcast\u003C/a\u003E for regular in depth discussions of how security works (and most notably: where it fails, of course) and recommend playing it at 1.5 speed\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EFinally: there\u0027s a lot more you can do to protect your site, but this is a mammoth post already so I\u0027ll end this here in hopes that I get more time in the future to cover related topics.\u003C/p\u003E\n\u003Cp\u003E\u00A0\u003C/p\u003E",
  "blocks": {
    "contentData": [],
    "settingsData": [],
    "expose": [],
    "Layout": {}
  }
}]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/92db67830b9f4e39bd751172581f2c3b]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[1]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>