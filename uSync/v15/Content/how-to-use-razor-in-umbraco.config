<?xml version="1.0" encoding="utf-8"?>
<Content Key="fab8f78d-5d8e-4f5d-b50d-50d4ce5c6de0" Alias="How to use Razor in Umbraco" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/HowToUseRazorInUmbraco</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2011-02-16T12:02:01</CreateDate>
    <NodeName Default="How to use Razor in Umbraco" />
    <SortOrder>25</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>This article is about the upcoming version of Umbraco (4.6.2), that uses normal .cshtml files instead of the .razor file extension. Examples will also be presented in HTML 5 format, so do remember that the tags are part of HTML 5, not Razor.</p>
<p><strong>Disclaimer: The Razor &nbsp;implementation is still very new and changing rapidly, some of this information might already be outdated.</strong></p>
<p>When using the Razor view engine it's important to remember that you are just writing HTML and, when you need some data, you switch context by starting with the "@" sign and adding some C# (yes, you can also make .vbhtml files and start writing VB, if you must):</p>
<pre class="brush: xml">&lt;article&gt;<br>
&lt;header&gt;&lt;h2&gt;@Model.Name&lt;/h2&gt;&lt;/header&gt;<br>
&lt;img src="@Model.ImageUpload" alt="@Model.Name" /&gt;<br>
@(Html.Raw(Model.BodyText))<br>
&lt;/article&gt;
</pre>
<p>In umbraco's case, the "Current" object holds the same data as the "currentPage" variable does in XSLT. All of the properties that are on the current document type are available to you, although you only get intellisense with the default properties (Id, Name, CreateDate, etc.).</p>
<p>As you can see, there's an interesting mix of html and @ signs. Not much to explain here except for the Html.Raw call, this is the same as saying disable-output-escaping="true" in XSLT. If you don't do this, all of the text will be encoded as HTML entities.</p>
<p>Now we have pretty decent looking page, let's make it a little more complex. Say I have a few news articles somewhere in my site, the titles of which I would like to display in a sidebar at all times. I could go and look for those nodes by looking at the Model.Parent and up and up until I was at level 1 and then find the child node with the "Article" type, but that's quite a bit of work to do every time I need to do something similar*.</p>
<p>It was much easier just to use Linq 2 Umbraco and query Umbraco's cached content (I'm open to suggestions if there's a better way).</p>
<p><em>* Although <a href="https://bitbucket.org/ElijahGlover/umbraco.uql/wiki/Home">UQL</a> will make this a bit easier</em></p>
<p>So now I get a Razor template that looks like this:</p>
<pre class="brush: xml">@using System;<br>
@using System.Linq;<br>
@using umbraco;<br>
<br>
@{<br>
var context = new MyNamespace.MyModelDataContext();<br>
var catArticles = context.Articles.OrderByDescending(x =&gt; x.CreateDate).ToList();<br>
}<br>
&lt;article&gt;<br>
&lt;header&gt;&lt;h2&gt;@Model.Name&lt;/h2&gt;&lt;/header&gt;<br>
&lt;img src="@Model.ImageUpload" alt="@Model.Name" /&gt;<br>
@(Html.Raw(Model.BodyText))<br>
&lt;/article&gt;<br>
&lt;aside&gt;<br>
&lt;ul&gt;<br>
@foreach (var article in catArticles)<br>
{<br>
&lt;li&gt;<br>
&lt;a href="@library.NiceUrl(article.Id)"&gt;@article.NodeName&lt;/a&gt;<br>
&lt;li&gt;<br>
}<br>
&lt;/ul&gt;<br>
&lt;/aside&gt;
</pre>
<p>Still pretty easy, now it's time for a real challenge. I have an image upload field and an image cropper on the article pages. The image cropper stores bits of XML for the values of the different crops. So just doing a @article.ImageCrop won't work. Here's where helpers come in.<br> Helpers can be created inline, but it's better when you just create a new .cshtml file in your App_Code and refer to that helper. It becomes reusable and actually helps you write better modular code. In this case the helper will return a value so it's called a function.</p>
<p>Careful here: if you add a .cshtml file to the App_Code folder through the Visual Studio interface, it will also add a key in the web.config:</p>
<pre class="brush: xml">&lt;add key="webpages:Enabled" value="true" /&gt;
</pre>
<p>This wil result in a "yellow screen of death", complaining that the UmbracoMembershipProvider is configured incorrectly: "Parser Error Message: This method cannot be called during the application's pre-start initialization stage."</p>
<p>So I've created <a href="/media/XmlFunctions.txt">a tiny little XML parser</a> (untested in the real world, be sure to rename from .txt to .cshtml) and will use that to get the cropped image out:</p>
<pre class="brush: xml">&lt;aside&gt;<br>
&lt;ul&gt;<br>
@foreach (var article in catArticles)<br>
{<br>
&lt;li&gt;<br>
&lt;a href="@library.NiceUrl(article.Id)"&gt;<br>
&lt;img src="@XmlFunctions.GetAttributeValue(article.ImageCrop), "/crops/crop[@name = 'Small']", "url")" alt="@article.NodeName" /&gt;<br>
&lt;/a&gt;<br>
&lt;li&gt;<br>
}<br>
&lt;/ul&gt;<br>
&lt;/aside&gt;
</pre>
<p>Note that the namespace of the helper is the filename I've created in the App_Code folder, so XmlFunctions.cshtml translates to the XmlFunctions namespace in the Razor template.</p>
<p>And that concludes the first part of a few Razor posts.</p>
<p>For more info, be sure to check out these links:</p>
<ul>
<li><a href="http://www.aaron-powell.com/umbraco-4-and-razor" target="_blank">http://www.aaron-powell.com/umbraco-4-and-razor</a></li>
<li><a href="http://www.asp.net/webmatrix/tutorials/2-introduction-to-asp-net-web-programming-using-the-razor-syntax" target="_blank">http://www.asp.net/webmatrix/tutorials/2-introduction-to-asp-net-web-programming-using-the-razor-syntax</a></li>
<li><a href="http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx" target="_blank">http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx</a></li>
<li><a href="http://joeriks.wordpress.com/2011/01/12/razor-inline-helpers-in-umbraco-juno-full-sitemap-sample/" target="_blank">http://joeriks.wordpress.com/2011/01/12/razor-inline-helpers-in-umbraco-juno-full-sitemap-sample/</a></li>
<li><a href="http://joeriks.wordpress.com/2011/01/04/playing-with-razor-in-umbraco-an-old-skool-contact-form/" target="_blank">http://joeriks.wordpress.com/2011/01/04/playing-with-razor-in-umbraco-an-old-skool-contact-form/</a></li>
<li><a href="http://haacked.com/archive/2011/01/06/razor-syntax-quick-reference.aspx"> http://haacked.com/archive/2011/01/06/razor-syntax-quick-reference.aspx</a></li>
</ul>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/dff9461d89c246d79a84f9ec3d4630fc]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>