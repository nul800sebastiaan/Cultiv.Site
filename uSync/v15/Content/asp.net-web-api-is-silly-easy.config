<?xml version="1.0" encoding="utf-8"?>
<Content Key="4e9f072d-449b-45b1-951b-21b9f1718547" Alias="ASP.NET Web Api is silly easy" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/ASPNETWebApiIsSillyEasy</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2012-03-30T18:40:10</CreateDate>
    <NodeName Default="ASP.NET Web Api is silly easy" />
    <SortOrder>31</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>... Well: silly easy if you don't have too many requirements, but I did. Good news though: solved my problems in under 2 hours.</p>
<p>What is the ASP.NET Web API? Well, according to <a href="http://www.asp.net/web-api">Microsoft</a>: "<span><em>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework.</em>"</span></p>
<p>When I saw the demo at the TechDays last month, I formulated the following explenation: Anything that returns IEnumerable can now be accessed as XML/JSON and anything IQueryable can be queried with OData syntax; very <strong>very</strong> easily.</p>
<p>Here's what I had to do to go from a MVC3 site that uses Ninject for dependency injection to a MVC4 site that can answer to Web API calls.</p>
<p>First of all, I had to upgrade my solution to MVC4. The asp.net site provides <a href="http://www.asp.net/whitepapers/mvc4-release-notes#_Toc303253806"> detailed upgrade instructions</a> that just work.</p>
<p>Next, I installed <a href="http://www.nuget.org/packages/WebApi.All">Web API NuGet package</a> into my existing web project. For some reason, the routing was not updated so in my global.asax.cs I had to add the route like so:</p>
<pre class="brush: c-sharp">routes.MapHttpRoute("Default API Route",
"api/1.0/{controller}/{id}",
new { id = RouteParameter.Optional });
</pre>
<p>I think it's pretty self-explanatory that any ApiController I will add can be resolved through the URL /api/1.0/MyControllerName.</p>
<p>In the VS11 tooling (I don't know if this works with VS2010) I can now add a new controller of type API controller. If it doesn't work in VS2010, just create a new controller and inherit from ApiController instead of Controller.</p>
<p><img src="umb://media/4c645eda41ef450da1940b9eab8d8ecf" alt="2012-03-30_185208" width="499" height="325" data-udi="umb://media/4c645eda41ef450da1940b9eab8d8ecf"></p>
<p>Just running the default code for this worked fine, but of course I wanted to use Web API to access some of my existing database content.</p>
<p>So I added a constructor that accepted a IInfoService class and set up a field for it so it could be injected by Ninject. Well.. *BOOM* that didn't work, error:</p>
<p><strong>The service type provided could not be loaded as a service because it does not have a default (parameter-less) constructor. To fix the problem, add a default constructor to the type, or pass an instance of the type to the host.</strong></p>
<p>Well, after a bit of Googling the answer was provided by Phil Haack: <a href="http://haacked.com/archive/2012/03/11/itrsquos-the-little-things-about-asp-net-mvc-4.aspx"> You need to configure a dependency resolver for Web API</a>. To add to the class he posted there, I had to have these usings in place to make it work (make sure to use System.Web.Http.Services instead of System.Web.Mvc):&nbsp;</p>
<pre class="brush: c-sharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http.Services;
</pre>
<p>Perfect! Or so I thought.. Now when trying to call into the API, something was wrong with the serialization of my object due to the following error:</p>
<p><strong>The type 'MyType' cannot be serialized to JSON because its IsReference setting is 'True'. The JSON format does not support references because there is no standardized format for representing references. To enable serialization, disable the IsReference setting on the type or an appropriate parent class of the type.</strong></p>
<p>Another round of Googling and I found out that the default Microsof serializer does not support my type of object. Problem is, I can't just change my class either. So in comes my favourite <a href="http://nuget.org/packages/newtonsoft.json">Javascript serializer: Json.NET</a>. Another quick NuGet install and then I had to <a href="http://blogs.msdn.com/b/henrikn/archive/2012/02/18/using-json-net-with-asp-net-web-api.aspx"> replace the default MS serializer with Json.NET</a>.</p>
<p>The blog post in the last link is actually missing and important piece for me with my Web Application project (it refers to a self-hosted controller, I'm hosting my controllers in my Application!). So, using the JsonFormatter class, I added the following to my global.asax.cs:</p>
<pre class="brush: c-sharp">// Create Json.Net formatter serializing DateTime using the ISO 8601 format
var serializerSettings = new JsonSerializerSettings();
serializerSettings.Converters.Add(new IsoDateTimeConverter());
var jsonNetFormatter = new JsonNetFormatter(serializerSettings);
var index = GlobalConfiguration.Configuration.Formatters.IndexOf(GlobalConfiguration.Configuration.Formatters.JsonFormatter);
GlobalConfiguration.Configuration.Formatters.RemoveAt(index);
GlobalConfiguration.Configuration.Formatters.Insert(index, jsonNetFormatter);
</pre>
<p>And there you have it, now when I run the Web API call I get an actual beautiful JSON object back and if you look at the url, I even did some oData querying, because I could! My Get() function returns an IQueryable, from which you get oData querying automatically, awesome!</p>
<p><img src="umb://media/fb89d1efc3b341939c8d34184912acf5" alt="2012-03-30_192652" width="500" height="383" data-udi="umb://media/fb89d1efc3b341939c8d34184912acf5"></p>
<p>Of course, if you start with a MVC4 project in the future then most of this will be solved for you. I fully expect Ninject to do some updates so that their NuGet package will just make this work. The only thing that you might need to do is use Json.NET sometimes if you have unsupported objects that can't be changed.</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/a54ac8813ed048d5a080d028f1d6210c]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>