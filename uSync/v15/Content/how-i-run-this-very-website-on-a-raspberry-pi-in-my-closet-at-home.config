<?xml version="1.0" encoding="utf-8"?>
<Content Key="e47be587-fc6c-4f12-9cfd-92ea36a8fc37" Alias="How I run this very website on a Raspberry Pi in my closet at home" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/HowIRunThisVeryWebsiteOnARaspberryPiInMyClosetAtHome</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2023-09-17T17:23:29</CreateDate>
    <NodeName Default="How I run this very website on a Raspberry Pi in my closet at home" />
    <SortOrder>53</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>I've been doing this Umbraco thing for a while now, my first post on this blog is from 2009 (about custom user controls, yikes).</p>
<p>In my wildest dreams I wouldn't have thought that I'd be running this blog on a tiny computer in the closet of my home office, but here we are! </p>
<p>Umbraco has come a long way ever since we were finally able to switch to dotnet ("core") as the underlying software, instead of .NET framework. Suddenly the CMS turned into software that could run on all kinds of architectures, not just Windows. Even so, there were a few interesting hurdles to overcome in the beginning, <a href="/blog/running-umbraco-9-on-your-raspberry-pi/">which I blogged about 2 years ago</a>. The biggest problems were the difficulty of getting dotnet installed and hosting a database server on the Pi. Through evolutionary changes, the obstacles have mostly gone away. Ubuntu ships with the ability to install dotnet directly from it's own "app store" and Umbraco has a SQLite database provider now which means we don't need to have a heavy, full SQL Server installed any more.</p>
<p>So running an Umbraco site on a Raspberry Pi, really is not a bit problem any more. But what should we do with it? It's cool that it can run as server for maybe a dashboard at home or at work, but the use cases are quite limited. Umbraco is made for publishing things on the web! Sure we could run something like ngrok but that is meant for testing, not as a permanent solution to run a full website.</p>
<p>Luckily, one other significant thing happened in the past few years, Cloudflare has a product called Cloudflare  Tunnels, a completely free way to bind your domain name to (in my case) a tiny little server in the closet. Cloudflare Tunnels emerged from older offerings they had and their blog post announcing it last year was right on the point with it's title: <a rel="noopener" href="/Ridiculously%20easy%20to%20use%20Tunnels" target="_blank">Ridiculously easy to use Tunnels</a>. More on this later!</p>
<p>I have been testing running this site on the Pi for the last two months and finally <a rel="noopener" href="https://cultiv.social/@sebastiaan/111058824799692969" target="_blank">switched it over to the live domain, cultiv.nl this week</a>. I wanted to make sure everything was stable and that I could survive random reboots. My partner and I moved into a new apartment recently and there's been significant renovations, so I've switched the power off quite a lot. Yet, everything has been super stable!</p>
<h2>Stop yapping, Seb, show me how</h2>
<p>So with all this wonderful new tech, let me tell you how I've put it all together.</p>
<p>The abbreviated steps are:</p>
<ul>
<li>Flash Ubuntu server on a Raspberry Pi memory card</li>
<li>Install .NET 7 on the Pi</li>
<li>Publish a website with dotnet and copy it to the Pi</li>
<li>Run the website as a service, so it survives reboots</li>
<li>Add Cloudflare Tunnels to host the website on my own domain</li>
</ul>
<h3>Flashing</h3>
<p>You can download the <a rel="noopener" href="https://www.raspberrypi.com/software/" target="_blank">Raspberry Pi imager from their website</a> and run it with a guided wizard. I chose to install "Other general purpose OS" ➡️ Ubuntu ➡️Ubuntu server 23.04 64 bit. </p>
<p><img src="?rmode=max&amp;width=500" alt="" width="500" height="309" data-udi="umb://media/ce2cc8b736e24dd5ba33164eadc97268"></p>
<p>I also made sure to go into the advanced settings and set up a hostname (in my case: cultiv1.local), and a username and a password. Even though I have an ethernet connection I also pre-configured my wifi in the advanced settings just in case I accidently unplug the cable.</p>
<h3>Installing .NET 7</h3>
<p>Once the Pi has booted I can connect to it from Windows Terminal (this works in cmd.exe as well, but I love WT). What you do need to make sure to have installed is: ssh and scp. Type both these commands and then enter to see if you have them. I can't tell you where they came from, they seem to have pre-installed on my Windows 11, your mileage may vary 😅</p>
<p>Alright, with that intro out of the way, I can connect to my Pi. My username is 'sebastiaan' so I'll send that in to make the connection easy: </p>
<pre>ssh sebastiaan@cultiv1.local</pre>
<p>I get prompted for my password next and then I'm in.</p>
<p>For good measure, I want to make sure my Pi is completely updated with all the latest software so I run two commands to go through all of it.</p>
<pre>sudo apt update
sudo apt full-upgrade</pre>
<p>Finally after following all the prompts on the screen I reboot.</p>
<pre>sudo reboot</pre>
<p>None of that is absolutely necessary but I like to be up to date. </p>
<p>Now I can <a rel="noopener" href="https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu-2304" target="_blank">install .NET 7 as guided by Microsoft</a>.</p>
<pre>sudo apt-get update &amp;&amp; \
  sudo apt-get install -y dotnet-sdk-7.0
sudo apt-get update &amp;&amp; \
  sudo apt-get install -y aspnetcore-runtime-7.0  
sudo apt-get install -y dotnet-runtime-7.0
</pre>
<p>And that should do the trick!</p>
<h3>Publish site and copy it to the Pi</h3>
<p>To test this all out, I move back to my local Windows machine where I have set up a test website using <a rel="noopener" href="https://codeshare.co.uk/" target="_blank">Paul Seal's </a>brilliant <a href="https://psw.codeshare.co.uk/">Package Script Writer</a>.</p>
<p>If I go into that website <a rel="noopener" href="https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-publish" target="_blank">I can publish it with the command</a>:</p>
<pre>dotnet publish -c Release -o  .\release</pre>
<p>This publishes the website with the Release configuration and in a directory called "release" in the current directory.</p>
<p>I navigate into the release directory through Windows Explorer and make a single zip file of everything in there. This is to help with copying everything over. I tried copying all the individual files over and it takes forever with all the thousands of little files Umbraco has. Copying a single zip is, well, pretty zippy.</p>
<p>Now I can copy the zip over to the Pi. In order to do so I switch back to my ssh session on the Pi and make a new directory in my home directory called "testlive". Then I can do the <a rel="noopener" href="https://unix.stackexchange.com/a/106482" target="_blank">copy from Windows using scp</a>:</p>
<pre>scp release.zip sebastiaan@cultiv1.local:/home/sebastiaan/testlive/release.zip</pre>
<p>On the Pi, I need to do <a rel="noopener" href="https://askubuntu.com/questions/86849/how-to-unzip-a-zip-file-from-the-terminal" target="_blank">a one-time install of a package called unzip</a>, you can guess what we're needing that for 😉</p>
<pre>sudo apt-get install unzip</pre>
<p>After that is done we can go to the directory on the Pi where release.zip was copied, extract all the files and delete release.zip:</p>
<pre>unzip release.zip
rm release.zip</pre>
<p>I made sure to test that the site runs. My project was called "MyProject" so in the release directory there's a MyProject.dll, which is the main entry point for the app. In order to run the site, I ran: </p>
<pre>dotnet MyProject.dll</pre>
<p>This will give absolutely no output on the command line, so I opened a second ssh session into the Pi and tried to make sure something was running. By default, the site runs on port 5000 so I can see if there's a response using curl:</p>
<pre>curl http://localhost:5000</pre>
<p>This resulted in a bunch of HTML flashing on the screen. Excellent.</p>
<h3>Run the website as a service</h3>
<p>Now that I've confirmed the site can run, I tap CTRL+C on the first ssh session to stop it from running. I want to make sure the site starts every time the Pi reboots, so I followed the <a rel="noopener" href="https://swimburger.net/blog/dotnet/how-to-run-a-dotnet-core-console-app-as-a-service-using-systemd-on-linux" target="_blank">thorough guide by Niels Swimberghe</a> to do so. </p>
<p>I created a new text file called MyProject.service using nano (a text editor for Linux):</p>
<pre>nano MyProject.service</pre>
<p>The content of the file is as follows, I'll explain below what you would want to change:</p>
<pre>[Unit]
Description=ASP.NET Core web template

[Service]
# will set the Current Working Directory (CWD)
WorkingDirectory=/home/sebastiaan/testlive
# systemd will run this executable to start the service
# if /usr/bin/dotnet doesn't work, use `which dotnet` to find correct dotnet executable path
ExecStart=/usr/bin/dotnet /home/sebastiaan/testlive/MyProject.dll --urls "http://*:5001"
# to query logs using journalctl, set a logical name here
SyslogIdentifier=MyProject

# Use your username to keep things simple, for production scenario's I recommend a dedicated user/group.
# If you pick a different user, make sure dotnet and all permissions are set correctly to run the app.
# To update permissions, use 'chown yourusername -R /srv/AspNetSite' to take ownership of the folder and files,
#       Use 'chmod +x /srv/AspNetSite/AspNetSite' to allow execution of the executable file.
User=sebastiaan

# ensure the service restarts after crashing
Restart=always
# amount of time to wait before restarting the service
RestartSec=5

# copied from dotnet documentation at
# https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx
KillSignal=SIGINT
Environment=ASPNETCORE_ENVIRONMENT=Production
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target
</pre>
<p>I changed the WorkingDirectory to where my published site is located, then the arguments on ExecStart specify that location again plus the name of my dll. You'll note that I added a --urls option there, this is to change the default port number from 5000 to 5001. Knowing that this works, I can run multiple sites on this Pi 💡</p>
<p>Finally, I changed the SyslogIdentifier and the User to be my username.</p>
<p>Now I can copy this service definition to where Linux expects it, start my service and enable it to auto run:</p>
<pre>sudo cp MyProject.service /etc/systemd/system/MyProject.service
sudo systemctl daemon-reload &amp;&amp; sudo systemctl start MyProject
sudo systemctl enable MyProject</pre>
<p>I figured I should probably do another "curl" command to see if it works, and if it doesn't then I can look at Niels' guide again to figure out with journalctl what's being logged as going wrong. In my case, all was well 🎉</p>
<h3>Add Cloudflare Tunnels</h3>
<p>Okay, the last piece of the puzzle! As a caveat, my DNS is already being managed by Cloudflare and it is a requirement that yours is as well in order to follow the last few steps. Wherever you registered your domain name, it should allow you to not use the DNS services of the registrar but Cloudflare's DNS servers instead. I used Namecheap (and I don't like them but they indeed have cheap domains and they have a lot of TLDs that I would like to use) I configured them as follows:</p>
<p><img src="?rmode=max&amp;width=500&amp;height=118" alt="" width="500" height="118" data-udi="umb://media/dea13128d8174888807898e2da059de9"></p>
<p>Cloudflare will help you to some extend when you add a new domain there, use their guidance to configure your own.</p>
<p>On Cloudflare's Zero Trust dashboard at <a href="https://one.dash.cloudflare.com/">https://one.dash.cloudflare.com/</a> I can go to Access ➡️ Tunnels and tap on "Create Tunnel". There I choose to get the commands for Debian (Ubuntu is a Debian variant) on arm64 (the architecture of the Pi). After executing the 3 commands (which will install a service called "cloudflared", starts the services and makes a tunnel connection), you can tap "Next" to select your public hostname.</p>
<p>As I noted, your hostname should be known to Cloudflare already, otherwise it won't appear in the domain name dropdown.</p>
<p><img src="?rmode=max&amp;width=500&amp;height=194" alt="" width="500" height="194" data-udi="umb://media/d18252d48cdc4bd8bf219466b640a5db"></p>
<p>After selecting my domain I can now tell it about my site on the Pi, which is at <a href="http://localhost:5001">http://localhost:5001</a>.</p>
<p><img src="?rmode=max&amp;width=500&amp;height=119" alt="" width="500" height="119" data-udi="umb://media/e131beb824834ae790d7a22ad40326b7"></p>
<p>Cloudflare Tunnels will now set up a CNAME for you and will tunnel all the traffic to that domain name straight to your Raspberry Pi. Magic 🪄</p>
<p>Note that I didn't need to open any ports or tell my router anything. The Cloudflare Tunnel software coordinates the traffic transparently for you.</p>
<h2>Conclusion</h2>
<p>And there we have it, suddenly my site is running on a little board, literally in my closet.</p>
<p><img src="?rmode=max&amp;height=500" alt="" width="417" height="500" data-udi="umb://media/2d1fa862367742499e390f5753da3698"></p>
<p>It's the green one you can see above, entangled in the rest of my home automation jumble.</p>
<p>All of this seems like pure magic but is possible thanks to recent advancements in tech. </p>
<p>I would absolutely <strong>love</strong> to know if you tried this out yourself and how you're getting on. You can find me mostly on Mastodon but there's other places if you are not on that yet. Check <a href="https://cultiv.dev/">https://cultiv.dev/</a> for the latest ways to find me online.</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/2d1fa862367742499e390f5753da3698]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[0]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>