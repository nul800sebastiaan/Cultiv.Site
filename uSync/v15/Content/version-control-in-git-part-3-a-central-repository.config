<?xml version="1.0" encoding="utf-8"?>
<Content Key="b8f8692a-e2b0-4019-bf87-6c923aa6c960" Alias="Version control in Git - Part 3 (a central repository)" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/VersionControlInGitPart3ACentralRepository</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2009-10-06T11:54:01</CreateDate>
    <NodeName Default="Version control in Git - Part 3 (a central repository)" />
    <SortOrder>12</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[{
  "markup": "\u003Cp\u003ESo now that you\u0027ve \u003Ca href=\u0022/{localLink:4499069b-74f3-4040-9c7c-7313f86f5924}\u0022 type=\u0022document\u0022 title=\u0022Version control in Git - Part 1\u0022 data-udi=\u0022umb://document/4499069b74f340409c7c7313f86f5924\u0022\u003Estarted\u003C/a\u003E \u003Ca href=\u0022/{localLink:4d74fc9e-8430-49e0-b80b-e480989960d4}\u0022 type=\u0022document\u0022 title=\u0022Version control in Git - Part 2 (set-up and usage)\u0022 data-udi=\u0022umb://document/4d74fc9e843049e0b80be480989960d4\u0022\u003Eusing\u003C/a\u003E Git, you might want to share your repository with your team using a central repository. I\u0027ll show an example of how to do that by using a free account at \u003Ca href=\u0022http://www.unfuddle.com\u0022\u003EUnfuddle.com\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003ESign up for Unfuddle and log in to your account (through your_account_name.unfuddle.com). Go to \u0022Repositories\u0022 and create a new Git repository.\u003C/p\u003E\n\u003Cp\u003ENow you have to create an authorization key, to be able to log in to the Git repository remotely.\u003C/p\u003E\n\u003Cp\u003E\u003Cspan\u003E\u003Cimg src=\u0022\u0022 alt=\u00222009-10-05_193837\u0022 width=\u0022232\u0022 height=\u0022134\u0022 data-udi=\u0022umb://media/f750f9764f024a77aa4e0fae8ac58758\u0022\u003E\u003C/span\u003E\u003C/p\u003E\n\u003Cp\u003EGo back to Visual Studio and click Git\u0027s \u0022Browse repository\u0022 (the folder icon) button again. Then in the menu go to \u0022Remotes\u0022 \u0026gt; \u0022PuTTY\u0022 \u0026gt; \u0022Generate or import key\u0022.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\u0022 alt=\u00222009-10-06_120359\u0022 width=\u0022499\u0022 height=\u0022129\u0022 data-udi=\u0022umb://media/762f8a7b6181400ba58fda6b2d189a08\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EMake sure the settings for generating the key are correct, the key needs to be 2048 bits.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022\u0022 alt=\u00222009-10-05_090458\u0022 width=\u0022483\u0022 height=\u0022467\u0022 data-udi=\u0022umb://media/b851c205fa1a46ce8d4f37f269be5fdf\u0022\u003E\u003C/p\u003E\n\u003Cp\u003EAfter you\u0027ve generated the key, change the key comment to your e-mail address, and enter a passphrase for the key. Now, make sure you copy the key from \u003Cstrong\u003Ethis\u003C/strong\u003E window! Saving the public key generates a slightly different format, but Unfuddle really needs the format as it is in this window.\u003C/p\u003E\n\u003Cp\u003ESave the public and private key somewhere anyway, you\u0027ll especially be needing the private key later.\u003C/p\u003E\n\u003Cp\u003EIn Unfuddle go to \u0022People\u0022 \u0026gt; and edit the Account admin. In the bottom left you can enter a \u0022New public key...\u0022.\u003C/p\u003E\n\u003Cp\u003EWhen that key is accepted, go back to the \u0022Repositories\u0022 tab and find the repository server, under your repository title (something like git@your_account.unfuddle.com:your_account/abr.git), copy this address.\u003C/p\u003E\n\u003Cp\u003ENow you can set up the remote server in Visual Studio. In the menu bar, click \u0022Git\u0022 \u0026gt; \u0022Manage remotes\u0022. Give your remote server a name (no spaces) and paste the address you just copied.\u003C/p\u003E\n\u003Cp\u003EBrowse the private key that you stored earlier and choose hit \u0022Load SSH key\u0022. Enter the password for that key and then you can save the connection. For some reason the \u0022test connection\u0022 button fails for me (\u0022ERROR:gitosis.serve.main:Need SSH_ORIGINAL_COMMAND in environment.\u0022), it still works though.\u003C/p\u003E\n\u003Cp\u003ESo now you\u0027re ready to push whatever is committed in your current branch to the remote server, use the blue up arrow (\u0022Push changes to remote repository\u0022) to do so. You could also then push all branches and tags, or do a pull first to resolve any merge conflicts if you want.\u003C/p\u003E\n\u003Cp\u003EIn the next part of this series, I\u0027ll give a quick rundown of branching and merging.\u003C/p\u003E",
  "blocks": {
    "contentData": [],
    "settingsData": [],
    "expose": [],
    "Layout": {}
  }
}]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/e8c7d6ea006e427fa84f50575db9f4ab]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>