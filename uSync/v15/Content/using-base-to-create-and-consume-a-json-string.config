<?xml version="1.0" encoding="utf-8"?>
<Content Key="5fc1d04e-b1da-4fd6-885a-cb824335b547" Alias="Using &quot;/base&quot; to create and consume a JSON string" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/UsingBaseToCreateAndConsumeAJSONString</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2010-10-12T19:49:11</CreateDate>
    <NodeName Default="Using &quot;/base&quot; to create and consume a JSON string" />
    <SortOrder>22</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>So, you want to create and use javascript objects in Umbraco!</p>
<p>Not a problem. I'll be showing you an example using "/base", <a href="http://james.newtonking.com/pages/json-net.aspx">Json.NET</a> and a little bit of what I'm doing with <a href="http://umbraco.org/contour">Contour</a> at the moment.</p>
<p><strong>/base</strong><br> Umbraco's "/base" is an <a href="http://umbraco.org/documentation/books/introduction-to-base">extendable system for creating raw feeds directly from Umbraco using very basic Url's</a>.&nbsp;These feeds are typically in XML format but it's very easy to create a JSON feed instead of an XML one. The way /base works is by mapping a method to a URL through a config file (see the above link for an introduction).</p>
<p><strong>JSON</strong><br> In javascript you can use JSON (JavaScript Object Notation) to access data. A JSON object is just an array of strings, like so:</p>
<pre class="brush: xml">"person": {<br>
"name": "Sebastiaan Janssen",&nbsp;<br>
"country": "The Netherlands"<br>
}
</pre>
<p>You can access the information in this object by evaluating this string in javascript. Let's say the above JSON string was in a variable called "json":</p>
<pre class="brush: css">var result = eval("(" + json + ")");<br>
var name = result.person[0].name;
</pre>
<p>The variable "name" will now be filled with the string "Sebastiaan Janssen". To make sure the evaluation will work, you need to surround the JSON string with braces, which is what I've done on the first line.</p>
<p><strong>Json.NET</strong><br> So how great would it be if you could just output any old .net class as a JSON string, so you could easily use it in javascript? With Json.NET you can do just that! Have a look at <a href="http://contourcontrib.codeplex.com/SourceControl/changeset/view/3407#60876"> a simple example</a> in the source of my RESTContour package. The GetJsonForObject method accepts any object and spits out a JSON string, great!</p>
<p><strong>Putting it all together</strong><br> So let's combine all of the above. Create a method that outputs a string, the string will contain some JSON. Normally, a call to a /base method will result in some XML output, but we want a string.</p>
<p>In the restExtensions.config file there's a "permission" node, add a new attribute&nbsp;<strong>returnXml="false"</strong> to it so that the output will just be a string.</p>
<p>Now we can make an AJAX call (using a little <a href="http://jquery.com/">jQuery</a>) to the /base URL and evaluate the result. Going back to the RESTContour example class mentioned above, I am going to get all of the available Contour forms and alert the form names.</p>
<pre class="brush: xml">$(document).ready(function () {
var getFormUrl = "/base/getContourForm/GetAllForms";

$.ajax({
url: getFormUrl,
success: function (data) {
var result = eval("(" + data + ")");

for (var i = 0; i &lt; result.length; i++) {
alert(result[i].Name);
}
}
});
});
</pre>
<p>As said, you can output just about any object as a JSON string using base, which can be very useful, try it out!</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/72038fc545da4d6fbd4d0117aa5936be]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>