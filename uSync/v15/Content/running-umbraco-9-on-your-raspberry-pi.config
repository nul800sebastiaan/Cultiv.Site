<?xml version="1.0" encoding="utf-8"?>
<Content Key="051d0caf-6b01-4842-b74d-d30a3bed707d" Alias="Running Umbraco 9 on your Raspberry Pi" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/RunningUmbraco9OnYourRaspberryPi</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2021-08-09T18:59:04</CreateDate>
    <NodeName Default="Running Umbraco 9 on your Raspberry Pi" />
    <SortOrder>50</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>Let's start this post with some massive credits to Carl Sargunar for his pioneering work on getting Umbraco to run on Raspberry Pi. </p>
<ul>
<li>Article: <a href="https://skrift.io/issues/running-umbraco-on-a-raspberry-pi-or-how-i-stopped-worrying-and-learned-to-love-linux/">Running umbraco on a raspberry pi or how I stopped worrying and learned to love linux</a></li>
<li>CodeGarden 2021 talk: <a href="https://www.youtube.com/watch?v=0K-HqrHXoPE&amp;list=PLG_nqaT-rbpx6wIDr5ufUlbHkg6qB3sxH&amp;index=45" data-anchor="?v=0K-HqrHXoPE&amp;list=PLG_nqaT-rbpx6wIDr5ufUlbHkg6qB3sxH&amp;index=45">Almost OSS Nirvana : Running Umbraco on Linux for fun and profit</a></li>
</ul>
<p>Unfortunately Carl ran into the one limitation here: Umbraco 9 only supports SQL server which does not run on ARM, the architecture that Raspberry Pi uses. </p>
<p>Recently I got a hint from colleague <a href="https://github.com/rasmusjp">Rasmus</a> that maybe <a href="https://azure.microsoft.com/en-us/products/azure-sql/edge/">SQL Edge</a> could work. Spoiler alert: it did!</p>
<p><strong>Ingredients</strong></p>
<ul>
<li>Raspberry Pi 4 Model B with 8 gigs of memory
<ul>
<li>4 gigs might work but I haven't tried, 2 gigs does NOT work, I tried, it crashed the system each time</li>
</ul>
</li>
<li>A higher quality micro SD card
<ul>
<li>I tried using a super cheap SD card and it was not only slow, after a power outage it was also immediately corrupt - quality doesn't need to be expensive, I picked up a 32GB Sandisk Endurance card for less than $10</li>
</ul>
</li>
<li>An ethernet cable and router to connect it to (I won't cover WiFi)</li>
</ul>
<p>That's it! </p>
<p><strong>Operating system </strong></p>
<p>SQL Edge requires Docker and the SQL Edge image on Docker requires an ARM64 operating system. The default Raspberry Pi operating system is still 32 bit so we have to install something else.</p>
<p>Using the <a href="https://www.raspberrypi.org/software/">Raspberry Pi imager</a> we have the option to easily get other compatible operating systems.</p>
<p><img src="/media/uuoji0uv/2021-08-09_173856.png" alt="" width="500" height="331.3782991202346" data-udi="umb://media/6a941ca36f954fd9bf3569056fd49e3f" /></p>
<p>I am familiar with Ubuntu so that was my choice. I also have ran the Ubuntu Desktop version on the Pi and it's.. slow. So to optimize for speed, we're not going to have a graphical desktop environment, we're going command line only. Make sure to choose the 64 bit version of Ubuntu Server.</p>
<p>I didn't have a spare monitor available so I needed to be able to log into the Pi remotely. We can do that by putting a file in the root directory of the SD card that is named ssh. Once the SD card has been written to it will be ejected, so take it out of your computer and put it back in to be able to create that file.</p>
<p><strong>Note:</strong> This file <strong>HAS</strong> to be there before the first boot, so don't skip this step if you want to be able to connect without hooking it up to a screen/keyboard first.</p>
<p><img src="/media/qyjnsqsb/createsshfile.gif"" data-udi="umb://media/42d913806f414008ad51e6bd65e78f19" /></p>
<p><strong>Over to the Pi</strong></p>
<p>Right, we've put the SD card in the Pi and it's booted up. You'll need to find it's IP address in your router. I did say at the top I won't go into WiFi so.. yeah, you definitely will need to put it on wired ethernet at this point.</p>
<p>Once you know the IP you can use the following command to connect:</p>
<ul>
<li><strong>ssh ubuntu@192.168.1.236</strong></li>
</ul>
<p>The prerequisites here are that you have ssh, <a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701">Windows Terminal</a> comes with it I believe.</p>
<p><strong>Note:</strong> the first boot can take 2 or 3 minutes, so keep trying if it fails to connect the first few times.</p>
<p>In this command, ubuntu is the username. Your password the first time is also Ubuntu and you'll be asked immediately to change it. This process looks something like this:</p>
<p><img src="/media/cyujkfc3/2021-08-09_180814.png" alt="" width="418.2464454976303" height="500" data-udi="umb://media/14852910f25d451ca99afe0bc9360edf" /></p>
<p>Alright, we've set a password, ready for the next step!</p>
<p><strong>Install Docker and Docker Compose</strong></p>
<p>Docker is needed for SQL Edge to run. I found the excellent blog post <a href="https://dev.to/rohansawant/installing-docker-and-docker-compose-on-the-raspberry-pi-in-5-simple-steps-3mgl">Installing Docker and Docker Compose on the Raspberry Pi in 5 Simple Steps</a> and it was not a (total) lie! The only thing is that you will want to prefix all of the commands in this post with 'sudo' else you'll get a lot of "access denied" errors. </p>
<p>The second command '<strong>sudo usermod -aG docker pi</strong>' assumes that your username is 'pi' so that needs to be changed, the command that works is: '<strong>sudo usermod -aG docker ubuntu</strong>'.</p>
<p>Don't skip the dependences and Docker Compose steps, we need it all.</p>
<p><strong>Install SQL Edge</strong></p>
<p>There we are, on the doorstep of the missing link, a proper SQL Server running on Raspbery Pi. It's so easy now that it almost seems like cheating, there's 2 commands listed on <a href="https://docs.microsoft.com/en-us/azure/azure-sql-edge/disconnected-deployment">Microsoft's "Disconnected Deployment" page</a>.</p>
<p>The first one gets a copy of SQL Edge that can then be ran on Docker:</p>
<ul>
<li><strong>sudo docker pull mcr.microsoft.com/azure-sql-edge:latest</strong></li>
</ul>
<p>Then the second command starts the docker image:</p>
<ul>
<li><strong>sudo docker run --cap-add SYS_PTRACE -e 'ACCEPT_EULA=1' -e 'MSSQL_SA_PASSWORD=yourStrong(!)Password' -p 1433:1433 --name azuresqledge -d mcr.microsoft.com/azure-sql-edge</strong></li>
</ul>
<p>You will notice the password there.. I just kept it the same. I actually tried to make it 'abc123' but that was not allowed, it was not secure enough. Whereas the default password in all the documentation was accepted. So yeah, security 'ey!</p>
<p>SQL Edge is now starting on port 1433 and it will take a minute or two before you can connect. But after that you can switch to your Windows machine and use SQL Management Studio to connect.</p>
<p><img src="/media/xoepyk5p/2021-08-09_182704.png" alt="" width="477" height="315" data-udi="umb://media/2bfc89bd83ef45868b6caae49070027d" /></p>
<p>And then create a new database like normal.</p>
<p><img src="/media/sljgnxhp/2021-08-09_182808.png" alt="" width="421.0816777041943" height="500" data-udi="umb://media/dc66d294f0ef43078abd5dd0d471b5e7" /></p>
<p>Success! We have an empty database hosted on the Pi, no external service necessary.</p>
<p>In the near future, you might reboot your Pi and wonder how to start SQL server again, the command '<strong>sudo docker start azuresqledge</strong>' should get you up and running again.</p>
<p>Install .NET 5</p>
<p>I tried all of the convenient methods to install .NET but they all failed due to them not being made for ARM64 machines, so we have some manual commands to do. These are the latest versions I will list below at the time of writing, make sure to <a href="https://dotnet.microsoft.com/download/dotnet/5.0">check the Microsoft site for current versions</a> at the time of reading. Click "Arm64" both in the "SDK" section and the "ASP.NET Core Runtime" section for both of the download links you'll need. Then use the following commands with the appropriate links / filenames:</p>
<ul>
<li><strong>wget https://download.visualstudio.microsoft.com/download/pr/99d2e2e5-32b0-41e1-982d-82223eab6b8b/e4a5f67ab76a1ba54b6eae853bbdd354/dotnet-sdk-5.0.302-linux-arm64.tar.gz</strong></li>
<li><strong>wget https://download.visualstudio.microsoft.com/download/pr/36c6210a-5b28-4598-81f7-2cef1a0bd1d5/296782726e68368c8ddf87ba828b5fc7/aspnetcore-runtime-5.0.8-linux-arm64.tar.gz</strong></li>
<li><strong>sudo mkdir /opt/dotnet</strong></li>
<li><strong>sudo tar zxf dotnet-sdk-5.0.302-linux-arm64.tar.gz -C /opt/dotnet/</strong></li>
<li><strong>sudo tar zxf aspnetcore-runtime-5.0.8-linux-arm64.tar.gz -C /opt/dotnet/</strong></li>
<li><strong>sudo ln -s /opt/dotnet/dotnet /usr/local/bin</strong></li>
<li><strong>export DOTNET_ROOT=/opt/dotnet/</strong></li>
<li><strong>export PATH=${PATH}:${DOTNET_ROOT}</strong></li>
</ul>
<p>Right now we should be able to test this by checking with the command '<strong>dotnet --info</strong>', we should see the currently available version of .NET on our Pi.</p>
<p>If you reboot, you'll need to re-apply the last two commands. Instead of that you can edit a file with the command '<strong>nano ~/.bashrc</strong>' - scroll all the way to the end and add those two export commands. With <strong>CTRL+S</strong>, <strong>CTRL+X</strong> you'll save and exit out of nano.</p>
<p><strong>Creating an Umbraco site</strong></p>
<p>We're so close now! In order to get Umbraco running, there's <a href="https://our.umbraco.com/Documentation/Fundamentals/Setup/Install/install-umbraco-with-templates">some excellent documentation on Our Umbraco</a>.</p>
<p>I used the following commands:</p>
<ul>
<li><strong>dotnet new -i Umbraco.Templates::9.0.0-rc001</strong></li>
<li><strong>dotnet new umbraco -n TestSite</strong></li>
<li><strong>cd TestSite</strong></li>
<li><strong>dotnet build</strong></li>
<li><strong>dotnet run</strong></li>
</ul>
<p>At this point you will have a URL, woohoo!</p>
<p><img src="/media/nuclsclc/2021-08-09_215953.png" alt="" width="500" height="191.48936170212767" data-udi="umb://media/09a9056b2962482a9da17f7bdc4780b3" /></p>
<p><strong>Installing and using ngrok</strong></p>
<p>And now we have a huge problem.. localhost is our Ubuntu Server.. the Pi. The one without a Desktop environment, and no graphical browser. Also, it doesn't work to go to the IP and port listed here, the Kestrel server only responds to localhost.</p>
<p>I was to excited to get something working so I couldn't be bothered figuring out nginx or whatever other alternatives I had now. So I took a shortcut: I remembered that ngrok can open up anything to a public URL. Jackpot!</p>
<p>In a new terminal window I log into ssh again and fire of the command to install ngrok:</p>
<ul>
<li><strong>sudo snap install ngrok</strong></li>
</ul>
<p>If this is the first time you're using nrok, you need to <a href="https://dashboard.ngrok.com/signup">create an account on their website</a> to get an authentication token, which you can fill in in the next one-time command:</p>
<ul>
<li><strong>ngrok authtoken &lt;your_auth_token&gt;</strong></li>
</ul>
<p>After that is done we need to fiddle a bit with the port number, the final command I landed on was:</p>
<ul>
<li><strong>ngrok http 18646 -host-header="localhost:18646"</strong></li>
</ul>
<p><img src="/media/40cnwkvs/2021-08-09_220541.png" alt="" width="500" height="245.13888888888889" data-udi="umb://media/2acb85f011b246438b8cbb6ff010d93b" /></p>
<p>And suddenly we have a usable (public!) URL that proxies whatever localhost:18646 outputs.</p>
<p><strong>Installing Umbraco</strong></p>
<p>The ngrok URL will give us what we've been working for: the Umbraco installer wizard. The first page with username and password is familiar and works fine, however then we get to a slight problem in the database details.</p>
<p><img src="/media/qjyjbjsz/2021-08-09_200340.png" alt="" width="500" height="402.9239766081871" data-udi="umb://media/a68071844c5944e2aa06e94b7879b9bd" /></p>
<p>I tried using localhost and 127.0.0.1 as the server here, but in the end the only thing that seemed to work was the IP address I connect to ssh on, so in my case the server became '<strong>192.168.1.236</strong>'. <br /><br />A few tense moments later and I see the familiar message flashing by about installing database tables, etc. And there we have it: a fresh Umbraco install running stand-alone on a single Raspberry Pi.</p>
<p><img src="/media/kr4gyki0/2021-08-09_221403.png" alt="" width="500" height="163.78244746600743" data-udi="umb://media/296c7c52c71a401a91cbfbf5ddf4b89b" /></p>
<p><strong>Does it hold up?</strong></p>
<p>When I showed Warren my new Pi site he got curious and threw loader.io at it, with 250 clients/minute for a minute and 250 constant load for a minute. That last one caused a few time-outs on the Products page of The Starterkit. But looking at the server, I could see that by far the most CPU was used by ngrok. So I feel, unscientifically, that it will perform perfectly well for small to medium sites. But we'll have to do some more testing on a different web server. Maybe someone else can write that blog post? *cough*Carl*cough*</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/10ebc0986e8e410f8569f1966f0b4fab]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[0]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>