<?xml version="1.0" encoding="utf-8"?>
<Content Key="89cac2c8-a5d1-42c8-84c9-25bf5344b85a" Alias="How to use ASP.NET Web API in Umbraco 4 &amp; .NET 4.0" Level="3">
  <Info>
    <Parent Key="63f8fc44-6b65-4c47-a1c4-ba11a5fd981a">Blog</Parent>
    <Path>/Site/Blog/HowToUseASPNETWebAPIInUmbraco4NET40</Path>
    <Trashed>false</Trashed>
    <ContentType>blogPost</ContentType>
    <CreateDate>2012-06-28T17:33:32</CreateDate>
    <NodeName Default="How to use ASP.NET Web API in Umbraco 4 &amp; .NET 4.0" />
    <SortOrder>33</SortOrder>
    <Published Default="true" />
    <Schedule />
    <Template Key="a649a8ca-c7c4-4bd2-a252-d002b5483d44">BlogPost</Template>
  </Info>
  <Properties>
    <bodyText>
      <Value><![CDATA[<p>So, you really like the idea of the ASP.NET Web API and can't wait to use it? But you're using Umbraco 4 and / or Webforms? Good news everybody! It's super easy to use it.</p>
<p>First of all: Umbraco. It has a compiled global.asax out of the box and you can't actually go and extend it. In order to register the routing for the Web API you would normally have to edit the global.asax. Luckily, you can implement<strong>&nbsp;</strong>this easily using the System.Web.PreApplicationStartMethod.</p>
<p>So in Umbraco I have my Umbraco.Web project which is often completely uncompiled, so it's a Web Site Project instead of a Web Application Project (although I'm changing this). Next to that I usually have a seperate project called CustomerName.Extensions in which I add custom code that is compiled and the DLL ends up in Umbraco's bin folder.</p>
<p>Note: if you want to follow along, ASP.NET MVC 4 should be installed (it includes the Web API)&nbsp;on your machine (not in Umbraco) or you could install the <a href="http://nuget.org/packages/aspnetwebapi">Web API nuget package</a>.</p>
<p>In your (Umbraco) web project, you will also need a reference to Json.NET, again, just <a href="http://nuget.org/packages/newtonsoft.json">install the nuget package</a>.</p>
<p>To start with, I add references to that Extensions project:&nbsp;</p>
<ul>
<li>System.Web</li>
<li>System.Web.Http</li>
<li>System.Web.Http.WebHost</li>
</ul>
<p><span><br></span>Then I add a class to register the API routes on startup, for me it looks like this:&nbsp;</p>
<pre class="brush: csharp">using System.Linq;
using System.Web.Routing;
using System.Web.Http;
using CustomerName.Extensions;

[assembly: System.Web.PreApplicationStartMethod(typeof(AppStart), "PreStart")]
namespace CustomerName.Extensions
{
public static class AppStart
{
public static void PreStart()
{
RouteTable.Routes.MapHttpRoute(
name: "DefaultApi",
routeTemplate: "api/{controller}/{id}",
defaults: new { id = RouteParameter.Optional }
);
}
}
}
</pre>
<p>To test if the Web API bits work, add a new item to your project, I don't know about VS2010 but in VS2012 you can just find the Web API Controller Class right there.</p>
<p><img src="umb://media/803a96bf747c4f4eb065ca741017ecbd" alt="2012-06-28_174756" width="500" height="294" data-udi="umb://media/803a96bf747c4f4eb065ca741017ecbd"></p>
<p>If you can't pick that one, then just make a new class and have it inherit from ApiController (as pictured above as well).</p>
<p>The default API Controller will give you some methods and you can immediately compile and check it out.</p>
<p>So in my case, I go to: http://mysite.local/api/values and get a lovely XML feed:</p>
<p><img src="umb://media/02d2ade46eeb4796a6284c9ac33a8d3d" alt="C 36x" width="497" height="150" data-udi="umb://media/02d2ade46eeb4796a6284c9ac33a8d3d"></p>
<p>And.. that's all there is to it!</p>]]></Value>
    </bodyText>
    <image>
      <Value><![CDATA[umb://media/3226637ac7df4b4bb7c38ff92d80cceb]]></Value>
    </image>
    <pageTitle>
      <Value><![CDATA[]]></Value>
    </pageTitle>
    <searchEngineSitemapChangeFrequency>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapChangeFrequency>
    <searchEngineSitemapPriority>
      <Value><![CDATA[]]></Value>
    </searchEngineSitemapPriority>
    <stillRelevant>
      <Value><![CDATA[0]]></Value>
    </stillRelevant>
    <umbracoNaviHide>
      <Value><![CDATA[]]></Value>
    </umbracoNaviHide>
  </Properties>
</Content>